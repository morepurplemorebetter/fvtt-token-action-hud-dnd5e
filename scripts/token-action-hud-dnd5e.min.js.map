{"version":3,"file":"token-action-hud-dnd5e.min.js","sources":["constants.js","utils.js","action-handler.js","magic-items-extender.js","roll-handler.js","roll-handler-obsidian.js","defaults.js","settings.js","system-manager.js","init.js"],"sourcesContent":["/**\n * Module-based constants\n */\nexport const MODULE = {\n    ID: 'token-action-hud-dnd5e'\n}\n\n/**\n * Core module\n */\nexport const CORE_MODULE = {\n    ID: 'token-action-hud-core'\n}\n\n/**\n * Core module version required by the system module\n */\nexport const REQUIRED_CORE_MODULE_VERSION = '1.5'\n\n/**\n * Action type\n */\nexport const ACTION_TYPE = {\n    ability: 'DND5E.Ability',\n    check: 'tokenActionHud.dnd5e.check',\n    condition: 'tokenActionHud.dnd5e.condition',\n    counter: 'tokenActionHud.dnd5e.counter',\n    effect: 'DND5E.Effect',\n    exhaustion: 'DND5E.Exhaustion',\n    feature: 'ITEM.TypeFeat',\n    item: 'tokenActionHud.dnd5e.item',\n    save: 'DND5E.ActionSave',\n    skill: 'tokenActionHud.dnd5e.skill',\n    spell: 'ITEM.TypeSpell',\n    utility: 'DND5E.ActionUtil'\n}\n\n/**\n * Activation type icons\n */\nexport const ACTIVATION_TYPE_ICON = {\n    bonus: 'fas fa-plus',\n    crew: 'fas fa-users',\n    day: 'fas fa-hourglass-end',\n    hour: 'fas fa-hourglass-half',\n    lair: 'fas fa-home',\n    minute: 'fas fa-hourglass-start',\n    legendary: 'fas fas fa-dragon',\n    reaction: 'fas fa-bolt',\n    special: 'fas fa-star'\n}\n\n/**\n * Concentration icon\n */\nexport const CONCENTRATION_ICON = 'systems/dnd5e/icons/svg/statuses/concentrating.svg'\n\n/**\n * Conditions\n */\nexport const CONDITION = {\n    blind: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.0b8N4FymGGfbZGpJ' },\n    blinded: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.0b8N4FymGGfbZGpJ' },\n    'Convenient Effect: Blinded': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.0b8N4FymGGfbZGpJ' },\n    charmed: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.zZaEBrKkr66OWJvD' },\n    'Convenient Effect: Charmed': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.zZaEBrKkr66OWJvD' },\n    deaf: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.6G8JSjhn701cBITY' },\n    deafened: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.6G8JSjhn701cBITY' },\n    'Convenient Effect: Deafened': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.6G8JSjhn701cBITY' },\n    fear: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.oreoyaFKnvZCrgij' },\n    'Convenient Effect: Frightened': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.oreoyaFKnvZCrgij' },\n    frightened: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.oreoyaFKnvZCrgij' },\n    grappled: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.gYDAhd02ryUmtwZn' },\n    'Convenient Effect: Grappled': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.gYDAhd02ryUmtwZn' },\n    incapacitated: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.TpkZgLfxCmSndmpb' },\n    'Convenient Effect: Incapacitated': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.TpkZgLfxCmSndmpb' },\n    invisible: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.3UU5GCTVeRDbZy9u' },\n    'Convenient Effect: Invisible': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.3UU5GCTVeRDbZy9u' },\n    paralysis: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.xnSV5hLJIMaTABXP' },\n    paralyzed: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.xnSV5hLJIMaTABXP' },\n    'Convenient Effect: Paralyzed': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.xnSV5hLJIMaTABXP' },\n    petrified: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.xaNDaW6NwQTgHSmi' },\n    'Convenient Effect: Petrified': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.xaNDaW6NwQTgHSmi' },\n    poison: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.lq3TRI6ZlED8ABMx' },\n    poisoned: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.lq3TRI6ZlED8ABMx' },\n    'Convenient Effect: Poisoned': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.lq3TRI6ZlED8ABMx' },\n    prone: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.y0TkcdyoZlOTmAFT' },\n    'Convenient Effect: Prone': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.y0TkcdyoZlOTmAFT' },\n    restrain: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cSVcyZyNe2iG1fIc' },\n    restrained: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cSVcyZyNe2iG1fIc' },\n    'Convenient Effect: Restrained': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cSVcyZyNe2iG1fIc' },\n    stun: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.ZyZMUwA2rboh4ObS' },\n    stunned: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.ZyZMUwA2rboh4ObS' },\n    'Convenient Effect: Stunned': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.ZyZMUwA2rboh4ObS' },\n    unconscious: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.UWw13ISmMxDzmwbd' },\n    'Convenient Effect: Unconscious': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.UWw13ISmMxDzmwbd' },\n    exhaustion: { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cspWveykstnu3Zcv' },\n    'Convenient Effect: Exhaustion 1': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cspWveykstnu3Zcv' },\n    'Convenient Effect: Exhaustion 2': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cspWveykstnu3Zcv' },\n    'Convenient Effect: Exhaustion 3': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cspWveykstnu3Zcv' },\n    'Convenient Effect: Exhaustion 4': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cspWveykstnu3Zcv' },\n    'Convenient Effect: Exhaustion 5': { uuid: 'Compendium.dnd5e.rules.JournalEntry.w7eitkpD7QQTB6j0.JournalEntryPage.cspWveykstnu3Zcv' }\n}\n\n/**\n * Groups\n */\nexport const GROUP = {\n    _1stLevelSpells: { id: '1st-level-spells', name: 'tokenActionHud.dnd5e.1stLevelSpells', type: 'system' },\n    _2ndLevelSpells: { id: '2nd-level-spells', name: 'tokenActionHud.dnd5e.2ndLevelSpells', type: 'system' },\n    _3rdLevelSpells: { id: '3rd-level-spells', name: 'tokenActionHud.dnd5e.3rdLevelSpells', type: 'system' },\n    _4thLevelSpells: { id: '4th-level-spells', name: 'tokenActionHud.dnd5e.4thLevelSpells', type: 'system' },\n    _5thLevelSpells: { id: '5th-level-spells', name: 'tokenActionHud.dnd5e.5thLevelSpells', type: 'system' },\n    _6thLevelSpells: { id: '6th-level-spells', name: 'tokenActionHud.dnd5e.6thLevelSpells', type: 'system' },\n    _7thLevelSpells: { id: '7th-level-spells', name: 'tokenActionHud.dnd5e.7thLevelSpells', type: 'system' },\n    _8thLevelSpells: { id: '8th-level-spells', name: 'tokenActionHud.dnd5e.8thLevelSpells', type: 'system' },\n    _9thLevelSpells: { id: '9th-level-spells', name: 'tokenActionHud.dnd5e.9thLevelSpells', type: 'system' },\n    abilities: { id: 'abilities', name: 'tokenActionHud.dnd5e.abilities', type: 'system' },\n    actions: { id: 'actions', name: 'DND5E.ActionPl', type: 'system' },\n    activeFeatures: { id: 'active-features', name: 'tokenActionHud.dnd5e.activeFeatures', type: 'system' },\n    artificerInfusions: { id: 'artificer-infusions', name: 'tokenActionHud.dnd5e.artificerInfusions', type: 'system' },\n    atWillSpells: { id: 'at-will-spells', name: 'tokenActionHud.dnd5e.atWillSpells', type: 'system' },\n    backgroundFeatures: { id: 'background-features', name: 'tokenActionHud.dnd5e.backgroundFeatures', type: 'system' },\n    bonusActions: { id: 'bonus-actions', name: 'tokenActionHud.dnd5e.bonusActions', type: 'system' },\n    cantrips: { id: 'cantrips', name: 'tokenActionHud.dnd5e.cantrips', type: 'system' },\n    channelDivinity: { id: 'channel-divinity', name: 'tokenActionHud.dnd5e.channelDivinity', type: 'system' },\n    checks: { id: 'checks', name: 'tokenActionHud.dnd5e.checks', type: 'system' },\n    classFeatures: { id: 'class-features', name: 'tokenActionHud.dnd5e.classFeatures', type: 'system' },\n    combat: { id: 'combat', name: 'tokenActionHud.combat', type: 'system' },\n    conditions: { id: 'conditions', name: 'tokenActionHud.dnd5e.conditions', type: 'system' },\n    consumables: { id: 'consumables', name: 'ITEM.TypeConsumablePl', type: 'system' },\n    containers: { id: 'containers', name: 'ITEM.TypeContainerPl', type: 'system' },\n    counters: { id: 'counters', name: 'tokenActionHud.dnd5e.counters', type: 'system' },\n    crewActions: { id: 'crew-actions', name: 'tokenActionHud.dnd5e.crewActions', type: 'system' },\n    defensiveTactics: { id: 'defensive-tactics', name: 'tokenActionHud.dnd5e.defensiveTactics', type: 'system' },\n    eldritchInvocations: { id: 'eldritch-invocations', name: 'tokenActionHud.dnd5e.eldritchInvocations', type: 'system' },\n    elementalDisciplines: { id: 'elemental-disciplines', name: 'tokenActionHud.dnd5e.elementalDisciplines', type: 'system' },\n    equipment: { id: 'equipment', name: 'ITEM.TypeEquipmentPl', type: 'system' },\n    equipped: { id: 'equipped', name: 'DND5E.Equipped', type: 'system' },\n    exhaustion: { id: 'exhaustion', name: 'DND5E.Exhaustion', type: 'system' },\n    feats: { id: 'feats', name: 'tokenActionHud.dnd5e.feats', type: 'system' },\n    fightingStyles: { id: 'fighting-styles', name: 'tokenActionHud.dnd5e.fightingStyles', type: 'system' },\n    huntersPrey: { id: 'hunters-prey', name: 'tokenActionHud.dnd5e.huntersPrey', type: 'system' },\n    innateSpells: { id: 'innate-spells', name: 'tokenActionHud.dnd5e.innateSpells', type: 'system' },\n    kiAbilities: { id: 'ki-abilities', name: 'tokenActionHud.dnd5e.kiAbilities', type: 'system' },\n    lairActions: { id: 'lair-actions', name: 'tokenActionHud.dnd5e.lairActions', type: 'system' },\n    legendaryActions: { id: 'legendary-actions', name: 'tokenActionHud.dnd5e.legendaryActions', type: 'system' },\n    loot: { id: 'loot', name: 'ITEM.TypeLootPl', type: 'system' },\n    maneuvers: { id: 'maneuvers', name: 'tokenActionHud.dnd5e.maneuvers', type: 'system' },\n    metamagicOptions: { id: 'metamagic-options', name: 'tokenActionHud.dnd5e.metamagicOptions', type: 'system' },\n    monsterFeatures: { id: 'monster-features', name: 'tokenActionHud.dnd5e.monsterFeatures', type: 'system' },\n    multiattacks: { id: 'multiattacks', name: 'tokenActionHud.dnd5e.multiattacks', type: 'system' },\n    otherActions: { id: 'other-actions', name: 'tokenActionHud.dnd5e.otherActions', type: 'system' },\n    pactBoons: { id: 'pact-boons', name: 'tokenActionHud.dnd5e.pactBoons', type: 'system' },\n    pactSpells: { id: 'pact-spells', name: 'tokenActionHud.dnd5e.pactSpells', type: 'system' },\n    passiveEffects: { id: 'passive-effects', name: 'DND5E.EffectPassive', type: 'system' },\n    passiveFeatures: { id: 'passive-features', name: 'tokenActionHud.dnd5e.passiveFeatures', type: 'system' },\n    psionicPowers: { id: 'psionic-powers', name: 'tokenActionHud.dnd5e.psionicPowers', type: 'system' },\n    raceFeatures: { id: 'race-features', name: 'tokenActionHud.dnd5e.raceFeatures', type: 'system' },\n    reactions: { id: 'reactions', name: 'DND5E.ReactionPl', type: 'system' },\n    rests: { id: 'rests', name: 'tokenActionHud.dnd5e.rests', type: 'system' },\n    runes: { id: 'runes', name: 'tokenActionHud.dnd5e.runes', type: 'system' },\n    saves: { id: 'saves', name: 'DND5E.ClassSaves', type: 'system' },\n    skills: { id: 'skills', name: 'tokenActionHud.dnd5e.skills', type: 'system' },\n    superiorHuntersDefense: { id: 'superior-hunters-defense', name: 'tokenActionHud.dnd5e.superiorHuntersDefense', type: 'system' },\n    temporaryEffects: { id: 'temporary-effects', name: 'DND5E.EffectTemporary', type: 'system' },\n    token: { id: 'token', name: 'tokenActionHud.token', type: 'system' },\n    tools: { id: 'tools', name: 'ITEM.TypeToolPl', type: 'system' },\n    unequipped: { id: 'unequipped', name: 'DND5E.Unequipped', type: 'system' },\n    utility: { id: 'utility', name: 'tokenActionHud.utility', type: 'system' },\n    weapons: { id: 'weapons', name: 'ITEM.TypeWeaponPl', type: 'system' }\n}\n\n/**\n * Prepared icon\n */\nexport const PREPARED_ICON = 'fas fa-sun'\n\n/**\n * Proficiency level icons\n */\nexport const PROFICIENCY_LEVEL_ICON = {\n    0.5: 'fas fa-adjust',\n    1: 'fas fa-check',\n    2: 'fas fa-check-double'\n}\n\n/**\n * Rarity\n */\nexport const RARITY = {\n    common: 'tokenActionHud.dnd5e.common',\n    uncommon: 'tokenActionHud.dnd5e.uncommon',\n    rare: 'tokenActionHud.dnd5e.rare',\n    veryRare: 'tokenActionHud.dnd5e.veryRare',\n    legendary: 'tokenActionHud.dnd5e.legendary',\n    artifact: 'tokenActionHud.dnd5e.artifact'\n}\n\n/**\n * Ritual icon\n */\nexport const RITUAL_ICON = 'fas fa-circle-r'\n\n/**\n * Weapon properties\n */\nexport const WEAPON_PROPERTY = {\n    ada: 'DND5E.WeaponPropertiesAda',\n    amm: 'DND5E.WeaponPropertiesAmm',\n    fin: 'DND5E.WeaponPropertiesFin',\n    fir: 'DND5E.WeaponPropertiesFir',\n    foc: 'DND5E.WeaponPropertiesFoc',\n    hvy: 'DND5E.WeaponPropertiesHvy',\n    lgt: 'DND5E.WeaponPropertiesLgt',\n    lod: 'DND5E.WeaponPropertiesLod',\n    mgc: 'DND5E.WeaponPropertiesMgc',\n    rch: 'DND5E.WeaponPropertiesRch',\n    rel: 'DND5E.WeaponPropertiesRel',\n    ret: 'DND5E.WeaponPropertiesRet',\n    sil: 'DND5E.WeaponPropertiesSil',\n    spc: 'DND5E.WeaponPropertiesSpc',\n    thr: 'DND5E.WeaponPropertiesThr',\n    two: 'DND5E.WeaponPropertiesTwo',\n    ver: 'DND5E.WeaponPropertiesVer'\n}\n","import { MODULE } from './constants.js'\n\nexport let Utils = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    Utils = class Utils {\n    /**\n     * Get setting value\n     * @param {string} key The key\n     * @param {string=null} defaultValue The default value\n     * @returns The setting value\n     */\n        static getSetting (key, defaultValue = null) {\n            let value = defaultValue ?? null\n            try {\n                value = game.settings.get(MODULE.ID, key)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n            return value\n        }\n\n        /**\n     * Set setting value\n     * @param {string} key The key\n     * @param {string} value The value\n     */\n        static async setSetting (key, value) {\n            try {\n                value = await game.settings.set(MODULE.ID, key, value)\n                coreModule.api.Logger.debug(`Setting '${key}' set to '${value}'`)\n            } catch {\n                coreModule.api.Logger.debug(`Setting '${key}' not found`)\n            }\n        }\n    }\n})\n","// System Module Imports\nimport { ACTIVATION_TYPE_ICON, ACTION_TYPE, CONCENTRATION_ICON, CONDITION, PREPARED_ICON, PROFICIENCY_LEVEL_ICON, RARITY, WEAPON_PROPERTY } from './constants.js'\nimport { Utils } from './utils.js'\n\nexport let ActionHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    ActionHandler = class ActionHandler extends coreModule.api.ActionHandler {\n    // Initialize actor and token variables\n        actors = null\n        tokens = null\n        actorType = null\n\n        // Initialize items variable\n        items = null\n\n        // Initialize setting variables\n        abbreviateSkills = null\n        displaySpellInfo = null\n        showItemsWithoutActivationCosts = null\n        showUnchargedItems = null\n        showUnequippedItems = null\n        showUnpreparedSpells = null\n\n        // Initialize groupIds variables\n        activationgroupIds = null\n        featuregroupIds = null\n        inventorygroupIds = null\n        spellgroupIds = null\n\n        // Initialize action variables\n        featureActions = null\n        inventoryActions = null\n        spellActions = null\n\n        systemVersion = game.dnd5e.version\n\n        /**\n         * Build System Actions\n         * @override\n         * @param {array} groupIds\n         * @returns {object}\n         */\n        async buildSystemActions (groupIds) {\n        // Set actor and token variables\n            this.actors = (!this.actor) ? this.#getActors() : [this.actor]\n            this.tokens = (!this.token) ? this.#getTokens() : [this.token]\n            this.actorType = this.actor?.type\n\n            // Set items variable\n            if (this.actor) {\n                let items = this.actor.items\n                items = this.#discardSlowItems(items)\n                items = coreModule.api.Utils.sortItemsByName(items)\n                this.items = items\n            }\n\n            // Set settings variables\n            this.abbreviateSkills = Utils.getSetting('abbreviateSkills')\n            this.displaySpellInfo = Utils.getSetting('displaySpellInfo')\n            this.showItemsWithoutActivationCosts = Utils.getSetting('showItemsWithoutActivationCosts')\n            this.showUnchargedItems = Utils.getSetting('showUnchargedItems')\n            this.showUnequippedItems = Utils.getSetting('showUnequippedItems')\n            if (this.actorType === 'npc' && !this.showUnequippedItems) {\n                this.showUnequippedItems = Utils.getSetting('showUnequippedItemsNpcs')\n            }\n            this.showUnpreparedSpells = Utils.getSetting('showUnpreparedSpells')\n\n            this.activationgroupIds = [\n                'actions',\n                'bonus-actions',\n                'crew-actions',\n                'lair-actions',\n                'legendary-actions',\n                'reactions',\n                'other-actions'\n            ]\n\n            this.featuregroupIds = [\n                'active-features',\n                'passive-features',\n                'background-features',\n                'class-features',\n                'feats',\n                'monster-features',\n                'race-features',\n                'artificer-infusions',\n                'channel-divinity',\n                'defensive-tactics',\n                'eldritch-invocations',\n                'elemental-disciplines',\n                'fighting-styles',\n                'hunters-prey',\n                'ki-abilities',\n                'maneuvers',\n                'metamagic-options',\n                'multiattacks',\n                'pact-boons',\n                'psionic-powers',\n                'runes',\n                'superior-hunters-defense'\n            ]\n\n            this.spellgroupIds = [\n                'cantrips',\n                '1st-level-spells',\n                '2nd-level-spells',\n                '3rd-level-spells',\n                '4th-level-spells',\n                '5th-level-spells',\n                '6th-level-spells',\n                '7th-level-spells',\n                '8th-level-spells',\n                '9th-level-spells',\n                'at-will-spells',\n                'innate-spells',\n                'pact-spells'\n            ]\n\n            if (this.actorType === 'character' || this.actorType === 'npc') {\n                this.inventorygroupIds = [\n                    'equipped',\n                    'consumables',\n                    'containers',\n                    'equipment',\n                    'loot',\n                    'tools',\n                    'weapons',\n                    'unequipped'\n                ]\n\n                await this.#buildCharacterActions()\n            } else if (this.actorType === 'vehicle') {\n                this.inventorygroupIds = [\n                    'consumables',\n                    'equipment',\n                    'tools',\n                    'weapons'\n                ]\n\n                await this.#buildVehicleActions()\n            } else if (!this.actor) {\n                await this.#buildMultipleTokenActions()\n            }\n        }\n\n        /**\n         * Build character actions\n         * @private\n         * @returns {object}\n         */\n        async #buildCharacterActions () {\n            await Promise.all([\n                this.#buildConditions(),\n                this.#buildEffects(),\n                this.#buildFeatures(),\n                this.#buildInventory(),\n                this.#buildSpells()\n            ])\n            this.#buildAbilities('ability', 'abilities')\n            this.#buildAbilities('check', 'checks')\n            this.#buildAbilities('save', 'saves')\n            this.#buildCombat()\n            this.#buildCounters()\n            this.#buildExhaustion()\n            this.#buildRests()\n            this.#buildSkills()\n            this.#buildUtility()\n        }\n\n        /**\n         * Build vehicle actions\n         * @private\n         * @returns {object}\n         */\n        async #buildVehicleActions () {\n            await Promise.all([\n                this.#buildConditions(),\n                this.#buildEffects(),\n                this.#buildFeatures(),\n                this.#buildInventory()\n            ])\n            this.#buildAbilities('ability', 'abilities')\n            this.#buildAbilities('check', 'checks')\n            this.#buildAbilities('save', 'saves')\n            this.#buildCombat()\n            this.#buildUtility()\n        }\n\n        /**\n         * Build multiple token actions\n         * @private\n         * @returns {object}\n         */\n        async #buildMultipleTokenActions () {\n            this.#buildAbilities('ability', 'abilities')\n            this.#buildAbilities('check', 'checks')\n            this.#buildAbilities('save', 'saves')\n            this.#buildCombat()\n            await this.#buildConditions()\n            this.#buildRests()\n            this.#buildSkills()\n            this.#buildUtility()\n        }\n\n        /**\n         * Build abilities\n         * @private\n         * @param {string} actionType\n         * @param {string} groupId\n         */\n        #buildAbilities (actionType, groupId) {\n        // Get abilities\n            const abilities = (!this.actor) ? CONFIG.DND5E.abilities : this.actor.system.abilities\n\n            // Exit if no abilities exist\n            if (abilities.length === 0) return\n\n            // Get actions\n            const actions = Object.entries(abilities)\n                .filter((ability) => abilities[ability[0]].value !== 0)\n                .map(([abilityId, ability]) => {\n                    const id = `${actionType}-${abilityId}`\n                    const abbreviatedName = abilityId.charAt(0).toUpperCase() + abilityId.slice(1)\n                    const label = this.systemVersion >= '2.2' ? CONFIG.DND5E.abilities[abilityId].label : CONFIG.DND5E.abilities[abilityId]\n                    const name = this.abbreviateSkills ? abbreviatedName : label\n                    // Localise\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                    const listName = `${actionTypeName}${label}`\n                    const encodedValue = [actionType, abilityId].join(this.delimiter)\n                    const icon1 = (groupId !== 'checks') ? this.#getProficiencyIcon(abilities[abilityId].proficient) : ''\n                    const mod = (groupId !== 'saves') ? ability?.mod : ((groupId === 'saves') ? ability?.save : '')\n                    const info1 = (this.actor) ? { text: coreModule.api.Utils.getModifier(mod) } : null\n                    const info2 = (this.actor && groupId === 'abilities') ? { text: `(${coreModule.api.Utils.getModifier(ability?.save)})` } : null\n                    return {\n                        id,\n                        name,\n                        encodedValue,\n                        icon1,\n                        info1,\n                        info2,\n                        listName\n                    }\n                })\n\n            // Create group data\n            const groupData = { id: groupId, type: 'system' }\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build activations\n         * @public\n         * @param {object} data  groupData, actionData, actionType\n         */\n        async buildActivations (data) {\n            const { groupData, actionData, actionType = 'item' } = data\n\n            // Create map of items according to activation type\n            const activationItems = new Map()\n\n            // Create activation type mappings\n            const activationTypeMappings = {\n                action: 'actions',\n                bonus: 'bonus-actions',\n                crew: 'crew-actions',\n                lair: 'lair-actions',\n                legendary: 'legendary-actions',\n                reaction: 'reactions',\n                reactiondamage: 'reactions',\n                reactionmanual: 'reactions',\n                other: 'other-actions'\n            }\n\n            // Loop through items\n            for (const [key, value] of actionData) {\n                const activationType = value.system?.activation?.type\n                const activationTypeOther = (Object.keys(activationTypeMappings).includes(activationType)) ? activationType : 'other'\n                const groupId = activationTypeMappings[activationTypeOther]\n                if (!activationItems.has(groupId)) activationItems.set(groupId, new Map())\n                activationItems.get(groupId).set(key, value)\n            }\n\n            // Loop through action group ids\n            for (const activationGroupId of this.activationgroupIds) {\n                // Skip if no items exist\n                if (!activationItems.has(activationGroupId)) continue\n\n                // Clone and add to group data\n                const groupDataClone = { ...groupData, id: `${activationGroupId}+${groupData.id}`, type: 'system-derived' }\n\n                // Set Equipped and Unequipped groups to not selected by default\n                if (['equipped', 'unequipped'].includes(groupData.id)) { groupDataClone.defaultSelected = false }\n\n                // Create parent group data\n                const parentgroupData = { id: activationGroupId, type: 'system' }\n\n                // Add group to HUD\n                await this.addGroup(groupDataClone, parentgroupData)\n\n                // Add spell slot info to group\n                if (actionType === 'spell') {\n                    this.addGroupInfo(groupDataClone)\n                }\n\n                const actionData = activationItems.get(activationGroupId)\n\n                // Build actions\n                await this.buildActions({ groupData: groupDataClone, actionData, actionType })\n            }\n        }\n\n        /**\n         * Build combat\n         * @private\n         */\n        #buildCombat () {\n            const actionType = 'utility'\n\n            // Set combat types\n            const combatTypes = {\n                initiative: { id: 'initiative', name: coreModule.api.Utils.i18n('tokenActionHud.dnd5e.rollInitiative') },\n                endTurn: { id: 'endTurn', name: coreModule.api.Utils.i18n('tokenActionHud.endTurn') }\n            }\n\n            // Delete endTurn for multiple tokens\n            if (game.combat?.current?.tokenId !== this.token?.id) delete combatTypes.endTurn\n\n            // Get actions\n            const actions = Object.entries(combatTypes).map((combatType) => {\n                const id = combatType[1].id\n                const name = combatType[1].name\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, id].join(this.delimiter)\n                const info1 = {}\n                let cssClass = ''\n                if (combatType[0] === 'initiative' && game.combat) {\n                    const tokens = coreModule.api.Utils.getControlledTokens()\n                    const tokenIds = tokens?.map((token) => token.id)\n                    const combatants = game.combat.combatants.filter((combatant) => tokenIds.includes(combatant.tokenId))\n\n                    // Get initiative for single token\n                    if (combatants.length === 1) {\n                        const currentInitiative = combatants[0].initiative\n                        info1.class = 'tah-spotlight'\n                        info1.text = currentInitiative\n                    }\n\n                    const active = combatants.length > 0 && (combatants.every((combatant) => combatant?.initiative)) ? ' active' : ''\n                    cssClass = `toggle${active}`\n                }\n                return {\n                    id,\n                    name,\n                    encodedValue,\n                    info1,\n                    cssClass,\n                    listName\n                }\n            })\n\n            // Create group data\n            const groupData = { id: 'combat', type: 'system' }\n\n            // Add actions to HUD\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build conditions\n         * @private\n         */\n        async #buildConditions () {\n            if (this.tokens?.length === 0) return\n\n            const actionType = 'condition'\n\n            // Get conditions\n            const conditions = CONFIG.statusEffects.filter((condition) => condition.id !== '')\n\n            // Exit if no conditions exist\n            if (conditions.length === 0) return\n\n            // Get actions\n            const actions = await Promise.all(conditions.map(async (condition) => {\n                const id = condition.id\n                const name = coreModule.api.Utils.i18n(condition.label) ?? condition.name\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const encodedValue = [actionType, id].join(this.delimiter)\n                const active = this.actors.every((actor) => {\n                    if (game.version.startsWith('11')) {\n                        return actor.effects.some(effect => effect.statuses.some(status => status === id) && !effect?.disabled)\n                    } else {\n                        // V10\n                        return actor.effects.some(effect => effect.flags?.core?.statusId === id && !effect?.disabled)\n                    }\n                })\n                    ? ' active'\n                    : ''\n                const cssClass = `toggle${active}`\n                const img = coreModule.api.Utils.getImage(condition)\n                const tooltipData = await this.#getConditionTooltipData(id, name)\n                const tooltip = await this.#getTooltip(tooltipData)\n                return {\n                    id,\n                    name,\n                    encodedValue,\n                    img,\n                    cssClass,\n                    listName,\n                    tooltip\n                }\n            }))\n\n            // Create group data\n            const groupData = { id: 'conditions', type: 'system' }\n\n            // Add actions to HUD\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build counters\n         * @private\n         */\n        async #buildCounters () {\n            if (this.actorType !== 'character') return\n\n            const actionType = 'counter'\n\n            // Get counters\n            let counters = []\n\n            if (coreModule.api.Utils.isModuleActive('dnd5e-custom-counters')) {\n                if (this.actorType === 'character') {\n                    counters = Object.entries(game.settings.get('dnd5e-custom-counters', 'characterCounters'))\n                        .filter(([_, value]) => value.visible)\n                        .map(([key, value]) => {\n                            value.key = key\n                            return value\n                        })\n                } else {\n                    return\n                }\n            } else {\n                counters = [\n                    {\n                        name: coreModule.api.Utils.i18n('DND5E.DeathSave'),\n                        type: 'successFailure',\n                        system: true,\n                        visible: true,\n                        key: 'death-saves'\n                    },\n                    {\n                        name: coreModule.api.Utils.i18n('DND5E.Exhaustion'),\n                        type: 'number',\n                        system: true,\n                        visible: true,\n                        key: 'exhaustion'\n                    },\n                    {\n                        name: coreModule.api.Utils.i18n('DND5E.Inspiration'),\n                        type: 'checkbox',\n                        system: true,\n                        visible: true,\n                        key: 'inspiration'\n                    }\n                ]\n            }\n\n            // Get actions\n            const actions = counters.map(counter => {\n                const id = counter.key\n                const name = counter.name\n                const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                const listName = `${actionTypeName}${name}`\n                const value = (counter.system) ? id : encodeURIComponent(`${id}>${counter.type}`)\n                const encodedValue = [actionType, value].join(this.delimiter)\n                let active = ''\n                let cssClass = ''\n                let img = ''\n                let info1 = ''\n                if (counter.system) {\n                    switch (id) {\n                    case 'exhaustion':\n                        active = (this.actor.system.attributes.exhaustion > 0) ? ' active' : ''\n                        cssClass = `toggle${active}`\n                        img = coreModule.api.Utils.getImage('modules/token-action-hud-dnd5e/icons/exhaustion.svg')\n                        info1 = { text: this.actor.system.attributes.exhaustion }\n                        break\n                    case 'death-saves':\n                        img = coreModule.api.Utils.getImage('modules/token-action-hud-dnd5e/icons/death-saves.svg')\n                        info1 = { text: `${this.actor.system.attributes.death.success}/${this.actor.system.attributes.death.failure}` }\n                        break\n                    case 'inspiration':\n                        active = (this.actor.system.attributes.inspiration) ? ' active' : ''\n                        cssClass = `toggle${active}`\n                        img = coreModule.api.Utils.getImage('modules/token-action-hud-dnd5e/icons/inspiration.svg')\n                        break\n                    }\n                } else {\n                    const value = this.actor.getFlag('dnd5e-custom-counters', id)\n                    switch (counter.type) {\n                    case 'checkbox':\n                        active = (value) ? ' active' : ''\n                        cssClass = `toggle${active}`\n                        break\n                    case 'number':\n                        active = (value > 0) ? ' active' : ''\n                        cssClass = `toggle${active}`\n                        info1 = { text: value }\n                        break\n                    case 'successFailure':\n                        info1 = { text: `${value?.success ?? 0}/${value?.failure ?? 0}` }\n                        break\n                    }\n                }\n\n                return {\n                    id,\n                    name,\n                    listName,\n                    encodedValue,\n                    cssClass,\n                    img,\n                    info1\n                }\n            })\n\n            // Create group data\n            const groupData = { id: 'counters', type: 'system' }\n\n            // Add actions to HUD\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build effects\n         * @private\n         */\n        async #buildEffects () {\n            const actionType = 'effect'\n\n            // Get effects\n            const effects = new Map()\n            for (const effect of this.actor.allApplicableEffects()) {\n                effects.set(effect.id, effect)\n            }\n\n            // Exit if no effects exist\n            if (effects.size === 0) return\n\n            // Map passive and temporary effects to new maps\n            const passiveEffects = new Map()\n            const temporaryEffects = new Map()\n\n            // Iterate effects and add to a map based on the isTemporary value\n            for (const [effectId, effect] of effects.entries()) {\n                if (effect.isSuppressed || (effect.parent?.system?.identified === false && !game.user.isGM)) continue\n                const isTemporary = effect.isTemporary\n                if (isTemporary) {\n                    temporaryEffects.set(effectId, effect)\n                } else {\n                    passiveEffects.set(effectId, effect)\n                }\n            }\n\n            await Promise.all([\n                // Build passive effects\n                this.buildActions({ groupData: { id: 'passive-effects', type: 'system' }, actionData: passiveEffects, actionType }),\n                // Build temporary effects\n                this.buildActions({ groupData: { id: 'temporary-effects', type: 'system' }, actionData: temporaryEffects, actionType })\n            ])\n        }\n\n        /**\n         * Build exhaustion\n         * @private\n         */\n        #buildExhaustion () {\n            // Exit if every actor is not the character type\n            if (this.actors.length === 0) return\n            if (!this.actors.every(actor => actor.type === 'character')) return\n\n            const actionType = 'exhaustion'\n\n            const id = 'exhaustion'\n            const name = coreModule.api.Utils.i18n('DND5E.Exhaustion')\n            const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n            const listName = `${actionTypeName}${name}`\n            const encodedValue = [actionType, id].join(this.delimiter)\n            const img = coreModule.api.Utils.getImage('modules/token-action-hud-dnd5e/icons/exhaustion.svg')\n            const info1 = { text: this.actor.system.attributes.exhaustion }\n            let cssClass = ''\n            const active = this.actor.system.attributes.exhaustion > 0\n                ? ' active'\n                : ''\n            cssClass = `toggle${active}`\n\n            // Get actions\n            const actions = [{\n                cssClass,\n                id,\n                name,\n                encodedValue,\n                img,\n                info1,\n                listName\n            }]\n\n            // Create group data\n            const groupData = { id: 'exhaustion', type: 'system' }\n\n            // Add actions to HUD\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build features\n         * @private\n         */\n        async #buildFeatures () {\n            const actionType = 'feature'\n\n            // Get feats\n            const feats = new Map()\n            for (const [key, value] of this.items) {\n                const type = value.type\n                if (type === 'feat') feats.set(key, value)\n            }\n\n            // Early exit if no feats exist\n            if (feats.size === 0) return\n\n            // Map active and passive features to new maps\n            const featuresMap = new Map()\n\n            const featureTypes = [\n                { type: 'background', groupId: 'background-features' },\n                { type: 'class', groupId: 'class-features' },\n                { type: 'monster', groupId: 'monster-features' },\n                { type: 'race', groupId: 'race-features' },\n                { type: 'feats', groupId: 'feats' }\n            ]\n\n            const classFeatureTypes = [\n                { type: 'artificerInfusion', groupId: 'artificer-infusions' },\n                { type: 'channelDivinity', groupId: 'channel-divinity' },\n                { type: 'defensiveTactic', groupId: 'defensive-tactics' },\n                { type: 'eldritchInvocation', groupId: 'eldritch-invocations' },\n                { type: 'elementalDiscipline', groupId: 'elemental-disciplines' },\n                { type: 'fightingStyle', groupId: 'fighting-styles' },\n                { type: 'huntersPrey', groupId: 'hunters-prey' },\n                { type: 'ki', groupId: 'ki-abilities' },\n                { type: 'maneuver', groupId: 'maneuvers' },\n                { type: 'metamagic', groupId: 'metamagic-options' },\n                { type: 'multiattack', groupId: 'multiattacks' },\n                { type: 'pact', groupId: 'pact-boons' },\n                { type: 'psionicPower', groupId: 'psionic-powers' },\n                { type: 'rune', groupId: 'runes' },\n                { type: 'superiorHuntersDefense', groupId: 'superior-hunters-defense' }\n            ]\n\n            for (const [key, value] of feats) {\n                const activationType = value.system.activation?.type\n                const type = value.system.type.value\n                const subType = value.system.type?.subtype\n                if (activationType) {\n                    if (!featuresMap.has('active-features')) featuresMap.set('active-features', new Map())\n                    featuresMap.get('active-features').set(key, value)\n                }\n                if (!activationType || activationType === '') {\n                    if (!featuresMap.has('passive-features')) featuresMap.set('passive-features', new Map())\n                    featuresMap.get('passive-features').set(key, value)\n                }\n                for (const featureType of featureTypes) {\n                    const groupId = featureType.groupId\n                    if (featureType.type === type) {\n                        if (!featuresMap.has(groupId)) featuresMap.set(groupId, new Map())\n                        featuresMap.get(groupId).set(key, value)\n                    }\n                }\n                for (const featureType of classFeatureTypes) {\n                    const groupId = featureType.groupId\n                    if (subType && featureType.type === subType) {\n                        if (!featuresMap.has(groupId)) featuresMap.set(groupId, new Map())\n                        featuresMap.get(groupId).set(key, value)\n                    }\n                }\n            }\n\n            // Create group name mappings\n            const groupNameMappings = {\n                'active-features': coreModule.api.Utils.i18n('tokenActionHud.dnd5e.activeFeatures'),\n                'passive-features': coreModule.api.Utils.i18n('tokenActionHud.dnd5e.passiveFeatures')\n            }\n\n            // Loop through inventory groups ids\n            for (const groupId of this.featuregroupIds) {\n                if (!featuresMap.has(groupId)) continue\n\n                // Create group data\n                const groupData = {\n                    id: groupId,\n                    name: groupNameMappings[groupId] ?? '',\n                    type: 'system'\n                }\n\n                const actionData = featuresMap.get(groupId)\n                const data = { groupData, actionData, actionType }\n\n                // Build actions\n                await this.buildActions(data)\n\n                // Build activations\n                if (groupNameMappings[groupId]) await this.buildActivations(data)\n            }\n        }\n\n        /**\n         * Build inventory\n         * @private\n         */\n        async #buildInventory () {\n        // Exit early if no items exist\n            if (this.items.size === 0) return\n\n            const inventoryMap = new Map()\n\n            for (const [key, value] of this.items) {\n            // Set variables\n                const equipped = value.system.equipped\n                const hasQuantity = value.system?.quantity > 0\n                const isActiveItem = this.#isActiveItem(value)\n                const isUsableItem = this.#isUsableItem(value)\n                const isEquippedItem = this.#isEquippedItem(value)\n                const type = value.type\n\n                // Set items into maps\n                if (hasQuantity && isActiveItem) {\n                    if (equipped) {\n                        if (!inventoryMap.has('equipped')) inventoryMap.set('equipped', new Map())\n                        inventoryMap.get('equipped').set(key, value)\n                    }\n                    if (!equipped) {\n                        if (!inventoryMap.has('unequipped')) inventoryMap.set('unequipped', new Map())\n                        inventoryMap.get('unequipped').set(key, value)\n                    }\n                    if (isUsableItem && type === 'consumable') {\n                        if (!inventoryMap.has('consumables')) inventoryMap.set('consumables', new Map())\n                        inventoryMap.get('consumables').set(key, value)\n                    }\n                    if (isEquippedItem) {\n                        if (type === 'container') {\n                            if (!inventoryMap.has('containers')) inventoryMap.set('containers', new Map())\n                            inventoryMap.get('containers').set(key, value)\n                        }\n                        if (type === 'equipment') {\n                            if (!inventoryMap.has('equipment')) inventoryMap.set('equipment', new Map())\n                            inventoryMap.get('equipment').set(key, value)\n                        }\n                        if (type === 'loot') {\n                            if (!inventoryMap.has('loot')) inventoryMap.set('loot', new Map())\n                            inventoryMap.get('loot').set(key, value)\n                        }\n                        if (type === 'tool') {\n                            if (!inventoryMap.has('tools')) inventoryMap.set('tools', new Map())\n                            inventoryMap.get('tools').set(key, value)\n                        }\n                        if (type === 'weapon') {\n                            if (!inventoryMap.has('weapons')) inventoryMap.set('weapons', new Map())\n                            inventoryMap.get('weapons').set(key, value)\n                        }\n                    }\n                }\n            }\n\n            // Create group name mappings\n            const groupNameMappings = {\n                equipped: coreModule.api.Utils.i18n('DND5E.Equipped'),\n                unequipped: coreModule.api.Utils.i18n('DND5E.Unequipped'),\n                consumables: coreModule.api.Utils.i18n('ITEM.TypeConsumablePl'),\n                containers: coreModule.api.Utils.i18n('ITEM.TypeContainerPl'),\n                equipment: coreModule.api.Utils.i18n('ITEM.TypeEquipmentPl'),\n                loot: coreModule.api.Utils.i18n('ITEM.TypeLootPl'),\n                tools: coreModule.api.Utils.i18n('ITEM.TypeToolPl'),\n                weapons: coreModule.api.Utils.i18n('ITEM.TypeWeaponPl')\n            }\n\n            // Loop through inventory subcateogry ids\n            for (const groupId of this.inventorygroupIds) {\n                if (!inventoryMap.has(groupId)) continue\n\n                // Create group data\n                const groupData = {\n                    id: groupId,\n                    name: groupNameMappings[groupId],\n                    type: 'system'\n                }\n\n                const actionData = inventoryMap.get(groupId)\n                const data = { groupData, actionData }\n\n                // Build actions\n                await this.buildActions(data)\n\n                // Build activations\n                if (this.activationgroupIds) {\n                    await this.buildActivations(data)\n                }\n            }\n        }\n\n        /**\n         * Build rests\n         * @private\n         */\n        #buildRests () {\n            // Exit if every actor is not the character type\n            if (this.actors.length === 0) return\n            if (!this.actors.every(actor => actor.type === 'character')) return\n\n            const actionType = 'utility'\n\n            // Set rest types\n            const restTypes = {\n                shortRest: { name: coreModule.api.Utils.i18n('DND5E.ShortRest') },\n                longRest: { name: coreModule.api.Utils.i18n('DND5E.LongRest') }\n            }\n\n            // Get actions\n            const actions = Object.entries(restTypes)\n                .map((restType) => {\n                    const id = restType[0]\n                    const name = restType[1].name\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                    const listName = `${actionTypeName}${name}`\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    return {\n                        id,\n                        name,\n                        encodedValue,\n                        listName\n                    }\n                })\n\n            // Create group data\n            const groupData = { id: 'rests', type: 'system' }\n\n            // Add actions to HUD\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build skills\n         * @private\n         */\n        #buildSkills () {\n            const actionType = 'skill'\n\n            // Get skills\n            const skills = (!this.actor) ? CONFIG.DND5E.skills : this.actor.system.skills\n\n            // Exit if there are no skills\n            if (skills.length === 0) return\n\n            // Get actions\n            const actions = Object.entries(skills)\n                .map((skill) => {\n                    try {\n                        const id = skill[0]\n                        const abbreviatedName = id.charAt(0).toUpperCase() + id.slice(1)\n                        const name = this.abbreviateSkills ? abbreviatedName : CONFIG.DND5E.skills[id].label\n                        const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                        const listName = `${actionTypeName}${CONFIG.DND5E.skills[id].label}`\n                        const encodedValue = [actionType, id].join(this.delimiter)\n                        const icon1 = this.#getProficiencyIcon(skills[id].value)\n                        const mod = skills[id].total\n                        const info1 = (this.actor) ? { text: (mod || mod === 0) ? `${(mod >= 0) ? '+' : ''}${mod}` : '' } : ''\n                        return {\n                            id,\n                            name,\n                            encodedValue,\n                            icon1,\n                            info1,\n                            listName\n                        }\n                    } catch (error) {\n                        coreModule.api.Logger.error(skill)\n                        return null\n                    }\n                })\n                .filter((skill) => !!skill)\n\n            // Create group data\n            const groupData = { id: 'skills', type: 'system' }\n\n            // Add actions to HUD\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build spells\n         */\n        async #buildSpells () {\n            const actionType = 'spell'\n\n            const spellsMap = new Map()\n\n            const IwsApi = game.modules.get('items-with-spells-5e')?.api\n\n            // Loop through items\n            for (const [key, value] of this.items) {\n                const type = value.type\n                if (type === 'spell') {\n                    const isIwsSpell = IwsApi?.isIwsSpell(value)\n                    const isUsableItem = this.#isUsableItem(value)\n                    const isUsableSpell = this.#isUsableSpell(value)\n                    if (!isIwsSpell && isUsableItem && isUsableSpell) {\n                        const preparationMode = value.system.preparation.mode\n                        switch (preparationMode) {\n                        case 'atwill':\n                            if (!spellsMap.has('at-will-spells')) spellsMap.set('at-will-spells', new Map())\n                            spellsMap.get('at-will-spells').set(key, value)\n                            break\n                        case 'innate':\n                            if (!spellsMap.has('innate-spells')) spellsMap.set('innate-spells', new Map())\n                            spellsMap.get('innate-spells').set(key, value)\n                            break\n                        case 'pact':\n                            if (!spellsMap.has('pact-spells')) spellsMap.set('pact-spells', new Map())\n                            spellsMap.get('pact-spells').set(key, value)\n                            break\n                        default:\n                        { const level = value.system.level\n                            switch (level) {\n                            case 0:\n                                if (!spellsMap.has('cantrips')) spellsMap.set('cantrips', new Map())\n                                spellsMap.get('cantrips').set(key, value)\n                                break\n                            case 1:\n                                if (!spellsMap.has('1st-level-spells')) spellsMap.set('1st-level-spells', new Map())\n                                spellsMap.get('1st-level-spells').set(key, value)\n                                break\n                            case 2:\n                                if (!spellsMap.has('2nd-level-spells')) spellsMap.set('2nd-level-spells', new Map())\n                                spellsMap.get('2nd-level-spells').set(key, value)\n                                break\n                            case 3:\n                                if (!spellsMap.has('3rd-level-spells')) spellsMap.set('3rd-level-spells', new Map())\n                                spellsMap.get('3rd-level-spells').set(key, value)\n                                break\n                            case 4:\n                                if (!spellsMap.has('4th-level-spells')) spellsMap.set('4th-level-spells', new Map())\n                                spellsMap.get('4th-level-spells').set(key, value)\n                                break\n                            case 5:\n                                if (!spellsMap.has('5th-level-spells')) spellsMap.set('5th-level-spells', new Map())\n                                spellsMap.get('5th-level-spells').set(key, value)\n                                break\n                            case 6:\n                                if (!spellsMap.has('6th-level-spells')) spellsMap.set('6th-level-spells', new Map())\n                                spellsMap.get('6th-level-spells').set(key, value)\n                                break\n                            case 7:\n                                if (!spellsMap.has('7th-level-spells')) spellsMap.set('7th-level-spells', new Map())\n                                spellsMap.get('7th-level-spells').set(key, value)\n                                break\n                            case 8:\n                                if (!spellsMap.has('8th-level-spells')) spellsMap.set('8th-level-spells', new Map())\n                                spellsMap.get('8th-level-spells').set(key, value)\n                                break\n                            case 9:\n                                if (!spellsMap.has('9th-level-spells')) spellsMap.set('9th-level-spells', new Map())\n                                spellsMap.get('9th-level-spells').set(key, value)\n                                break\n                            }\n                        }\n                        }\n                    }\n                }\n            }\n\n            // Reverse sort spell slots by level\n            const systemSpells = Object.entries(this.actor.system.spells).reverse()\n\n            // Set spell slot availability\n            let pactSlot = null\n            const spellSlots = []\n            let spellSlotAvailable = this.showUnchargedItems\n            let pactSlotAvailable = this.showUnchargedItems\n            for (const [key, value] of systemSpells) {\n                const hasValue = value.value > 0\n                const hasMax = value.max > 0\n                const hasLevel = value.level > 0\n                if (key === 'pact') {\n                    if (!pactSlotAvailable && hasValue && hasMax && hasLevel) pactSlotAvailable = true\n                    if (!hasLevel) pactSlotAvailable = false\n                    value.slotAvailable = pactSlotAvailable\n                    pactSlot = [key, value]\n                }\n                if (key.startsWith('spell') && key !== 'spell0') {\n                    if (!spellSlotAvailable && hasValue && hasMax) spellSlotAvailable = true\n                    value.slotAvailable = spellSlotAvailable\n                    spellSlots.push([key, value])\n                } else {\n                    if (hasValue) {\n                        value.slotsAvailable = true\n                        spellSlots.push(key, value)\n                    }\n                }\n            }\n\n            // Set equivalent spell slot where pact slot is available\n            if (pactSlot[1].slotAvailable) {\n                const pactSpellEquivalent = spellSlots.findIndex(spell => spell[0] === 'spell' + pactSlot[1].level)\n                spellSlots[pactSpellEquivalent][1].slotsAvailable = true\n            }\n\n            const groupMappings = {\n                '1st-level-spells': { spellMode: 1, name: coreModule.api.Utils.i18n('tokenActionHud.dnd5e.1stLevelSpells') },\n                '2nd-level-spells': { spellMode: 2, name: coreModule.api.Utils.i18n('tokenActionHud.dnd5e.2ndLevelSpells') },\n                '3rd-level-spells': { spellMode: 3, name: coreModule.api.Utils.i18n('tokenActionHud.dnd5e.3rdLevelSpells') },\n                '4th-level-spells': { spellMode: 4, name: coreModule.api.Utils.i18n('tokenActionHud.dnd5e.4thLevelSpells') },\n                '5th-level-spells': { spellMode: 5, name: coreModule.api.Utils.i18n('tokenActionHud.dnd5e.5thLevelSpells') },\n                '6th-level-spells': { spellMode: 6, name: coreModule.api.Utils.i18n('tokenActionHud.dnd5e.6thLevelSpells') },\n                '7th-level-spells': { spellMode: 7, name: coreModule.api.Utils.i18n('tokenActionHud.dnd5e.7thLevelSpells') },\n                '8th-level-spells': { spellMode: 8, name: coreModule.api.Utils.i18n('tokenActionHud.dnd5e.8thLevelSpells') },\n                '9th-level-spells': { spellMode: 9, name: coreModule.api.Utils.i18n('tokenActionHud.dnd5e.9thLevelSpells') },\n                'at-will-spells': { spellMode: 'atwill', name: coreModule.api.Utils.i18n('tokenActionHud.dnd5e.atWillSpells') },\n                cantrips: { spellMode: 0, name: coreModule.api.Utils.i18n('tokenActionHud.dnd5e.cantrips') },\n                'innate-spells': { spellMode: 'innate', name: coreModule.api.Utils.i18n('tokenActionHud.dnd5e.innateSpells') },\n                'pact-spells': { spellMode: 'pact', name: coreModule.api.Utils.i18n('tokenActionHud.dnd5e.pactSpells') }\n            }\n\n            const spellSlotModes = ['1', '2', '3', '4', '5', '6', '7', '8', '9', 'pact']\n\n            for (const groupId of this.spellgroupIds) {\n                const spellMode = groupMappings[groupId].spellMode\n                const groupName = groupMappings[groupId].name\n\n                // Skip if no spells exist\n                if (!spellsMap.has(groupId)) continue\n\n                const levelInfo = (spellMode === 'pact') ? pactSlot[1] : spellSlots.find(spellSlot => spellSlot[0] === `spell${spellMode}`)?.[1]\n                const slots = levelInfo?.value\n                const max = levelInfo?.max\n                const slotsAvailable = levelInfo?.slotAvailable\n\n                // Skip if spells require spell slots and none are available\n                if (!slotsAvailable && spellSlotModes.includes(spellMode)) continue\n\n                // Create group data=\n                const groupInfo = {}\n                groupInfo.info1 = { class: 'tah-spotlight', text: (max >= 0) ? `${slots}/${max}` : '' }\n                const groupData = {\n                    id: groupId,\n                    name: groupName,\n                    type: 'system',\n                    info: groupInfo\n                }\n\n                // Add spell slot info to group\n                this.addGroupInfo(groupData)\n\n                const actionData = spellsMap.get(groupId)\n                const data = { groupData, actionData, actionType }\n\n                // Build actions\n                await this.buildActions(data)\n\n                // Build activations\n                if (this.activationgroupIds) { await this.buildActivations(data) }\n            }\n        }\n\n        /**\n         * Build utility\n         * @private\n         */\n        #buildUtility () {\n            // Exit if every actor is not the character type\n            if (this.actors.length === 0) return\n            if (!this.actors.every((actor) => actor.type === 'character')) return\n\n            const actionType = 'utility'\n\n            // Set utility types\n            const utilityTypes = {\n                deathSave: { name: coreModule.api.Utils.i18n('DND5E.DeathSave') },\n                inspiration: { name: coreModule.api.Utils.i18n('DND5E.Inspiration') }\n            }\n\n            // Delete 'deathSave' for multiple tokens\n            if (!this.actor || this.actor.system.attributes.hp.value > 0) delete utilityTypes.deathSave\n\n            // Get actions\n            const actions = Object.entries(utilityTypes)\n                .map((utilityType) => {\n                    const id = utilityType[0]\n                    const name = utilityType[1].name\n                    const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n                    const listName = `${actionTypeName}${name}`\n                    const encodedValue = [actionType, id].join(this.delimiter)\n                    let cssClass = ''\n                    if (utilityType[0] === 'inspiration') {\n                        const active = this.actors.every((actor) => actor.system.attributes?.inspiration)\n                            ? ' active'\n                            : ''\n                        cssClass = `toggle${active}`\n                    }\n                    return {\n                        id,\n                        name,\n                        encodedValue,\n                        cssClass,\n                        listName\n                    }\n                })\n\n            // Crreate group data\n            const groupData = { id: 'utility', type: 'system' }\n\n            // Add actions to HUD\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Build actions\n         * @public\n         * @param {object} data actionData, groupData, actionType\n         * @param {object} options\n         */\n        async buildActions (data, options) {\n            const { actionData, groupData, actionType } = data\n\n            // Exit if there is no action data\n            if (actionData.size === 0) return\n\n            // Exit if there is no groupId\n            const groupId = (typeof groupData === 'string' ? groupData : groupData?.id)\n            if (!groupId) return\n\n            // Get actions\n            const actions = await Promise.all([...actionData].map(async item => await this.#getAction(actionType, item[1])))\n\n            // Add actions to action list\n            this.addActions(actions, groupData)\n        }\n\n        /**\n         * Get action\n         * @private\n         * @param {string} actionType\n         * @param {object} entity\n         * @param {object} options\n         * @returns {object}\n         */\n        async #getAction (actionType = 'item', entity) {\n            const id = entity.id ?? entity._id\n            let name = entity?.name ?? entity?.label\n            if (\n                entity?.system?.recharge &&\n                !entity?.system?.recharge?.charged &&\n                entity?.system?.recharge?.value\n            ) {\n                name += ` (${coreModule.api.Utils.i18n('DND5E.Recharge')})`\n            }\n            const actionTypeName = `${coreModule.api.Utils.i18n(ACTION_TYPE[actionType])}: ` ?? ''\n            const listName = `${actionTypeName}${name}`\n            let cssClass = ''\n            if (Object.hasOwn(entity, 'disabled')) {\n                const active = (!entity.disabled) ? ' active' : ''\n                cssClass = `toggle${active}`\n            }\n            const encodedValue = [actionType, id].join(this.delimiter)\n            const img = coreModule.api.Utils.getImage(entity)\n            const icon1 = this.#getActivationTypeIcon(entity?.system?.activation?.type)\n            const icon2 = this.#getPreparedIcon(entity)\n            const icon3 = this.#getConcentrationIcon(entity)\n            const info = this.#getItemInfo(entity)\n            const info1 = info?.info1\n            const info2 = info?.info2\n            const info3 = info?.info3\n            const tooltipData = await this.#getTooltipData(entity)\n            const tooltip = await this.#getTooltip(tooltipData)\n            return {\n                id,\n                name,\n                encodedValue,\n                cssClass,\n                img,\n                icon1,\n                icon2,\n                icon3,\n                info1,\n                info2,\n                info3,\n                listName,\n                tooltip\n            }\n        }\n\n        /**\n         * Is active item\n         * @param {object} item\n         * @returns {boolean}\n         */\n        #isActiveItem (item) {\n            if (this.showItemsWithoutActivationCosts) return true\n            const activationTypes = Object.keys(CONFIG.DND5E.abilityActivationTypes).filter((at) => at !== 'none')\n            const activation = item.system.activation\n            const activationType = activation?.type\n            if ((activation && activationTypes.includes(activationType)) || item.type === 'tool') return true\n            return false\n        }\n\n        /**\n         * Is equipped item\n         * @private\n         * @param {object} item\n         * @returns {boolean}\n         */\n        #isEquippedItem (item) {\n            const type = item.type\n            const excludedTypes = ['consumable', 'spell', 'feat']\n            if (this.showUnequippedItems && !excludedTypes.includes(type)) return true\n            const equipped = item.system.equipped\n            if (equipped && type !== 'consumable') return true\n            return false\n        }\n\n        /**\n         * Is usable item\n         * @private\n         * @param {object} item The item\n         * @returns {boolean}\n         */\n        #isUsableItem (item) {\n            if (this.showUnchargedItems) return true\n            const uses = item.system.uses\n            if (!uses) return false\n            return true\n        }\n\n        /**\n         * Is usable spell\n         * @param {object} spell  The spell\n         * @returns {boolean}\n         */\n        #isUsableSpell (spell) {\n            if (this.actorType !== 'character' && this.showUnequippedItems) return true\n            const prepared = spell.system.preparation.prepared\n            if (this.showUnpreparedSpells) return true\n            // Set variables\n            const level = spell.system.level\n            const preparationModes = Object.keys(CONFIG.DND5E.spellPreparationModes)\n                .filter(preparationMode => preparationMode !== 'prepared')\n            const preparationMode = spell.system.preparation.mode\n\n            // Return true if spell is a cantrip, has a preparation mode other than 'prepared' or is prepared\n            if (level === 0 || preparationModes.includes(preparationMode) || prepared) return true\n            return false\n        }\n\n        /**\n         * Get item info\n         * @private\n         * @param {object} item\n         * @returns {object}\n         */\n        #getItemInfo (item) {\n            const info1 = item.type === 'spell' ? this.#getSpellInfo(item) : this.#getQuantityData(item)\n            const info2 = this.#getUsesData(item)\n            const info3 = this.#getConsumeData(item)\n\n            return { info1, info2, info3 }\n        }\n\n        /**\n         * Add spell info\n         * @param {object} spell\n         */\n        #getSpellInfo (spell) {\n            if (!this.displaySpellInfo) return null\n            const info = { text: '' }\n            const componentsArray = []\n            const components = spell.system?.properties\n            const componentTypes = [\n                ['vocal', 'DND5E.ComponentVerbal'],\n                ['somatic', 'DND5E.ComponentSomatic'],\n                ['material', 'DND5E.ComponentMaterial']\n            ]\n            componentTypes.forEach(component => {\n                if (components?.has(component[0])) {\n                    componentsArray.push(coreModule.api.Utils.i18n(component[1]))\n                    info.text += coreModule.api.Utils.i18n(`${component[1]}Abbr`)\n                }\n            })\n\n            // Ritual\n            if (components?.has('ritual')) {\n                componentsArray.push(`[${coreModule.api.Utils.i18n('DND5E.Ritual')}]`)\n                info.text += ` [${coreModule.api.Utils.i18n('DND5E.RitualAbbr')}]`\n            }\n\n            info.title = componentsArray.join(', ')\n\n            return info\n        }\n\n        /**\n         * Get actors\n         * @private\n         * @returns {object}\n         */\n        #getActors () {\n            const allowedTypes = ['character', 'npc']\n            const tokens = coreModule.api.Utils.getControlledTokens()\n            const actors = tokens?.filter(token => token.actor).map((token) => token.actor)\n            if (actors.every((actor) => allowedTypes.includes(actor.type))) {\n                return actors\n            } else {\n                return []\n            }\n        }\n\n        /**\n         * Get tokens\n         * @private\n         * @returns {object}\n         */\n        #getTokens () {\n            const allowedTypes = ['character', 'npc']\n            const tokens = coreModule.api.Utils.getControlledTokens()\n            const actors = tokens?.filter(token => token.actor).map((token) => token.actor)\n            if (actors.every((actor) => allowedTypes.includes(actor.type))) {\n                return tokens\n            } else {\n                return []\n            }\n        }\n\n        /**\n         * Get quantity\n         * @private\n         * @param {object} item\n         * @returns {string}\n         */\n        #getQuantityData (item) {\n            const quantity = item?.system?.quantity ?? 0\n            return {\n                text: (quantity > 1) ? quantity : '',\n                title: `${coreModule.api.Utils.i18n('DND5E.Quantity')}: ${quantity}`\n            }\n        }\n\n        /**\n         * Get uses\n         * @private\n         * @param {object} item\n         * @param {string} consumeName\n         * @param {integer} consumeAmount\n         * @returns {string}\n         */\n        #getUsesData (item, consumeName, consumeAmount) {\n            const uses = item?.system?.uses\n            if (uses?.per && (consumeName || uses?.prompt) && (uses.value > 0 || uses.max > 0)) {\n                const of = coreModule.api.Utils.i18n('DND5E.of')\n                const per = uses.per === 'charges' ? '' : ` ${coreModule.api.Utils.i18n('DND5E.per')}`\n                const period = CONFIG.DND5E.limitedUsePeriods[uses.per]?.label ?? uses.per\n                const amount = consumeAmount !== undefined ? consumeAmount : uses.amount\n                const text = `${amount > 1 ? `${amount} ${of} ` : ''}${uses.value ?? '0'}${uses.max > 0 ? `/${uses.max}` : ''}`\n                const title = `${text}${per} ${period}${consumeName ? ` (${of} ${consumeName})` : ''}`\n                return { text, title }\n            }\n            return {}\n        }\n\n        /**\n         * Get consume\n         * @private\n         * @param {object} item\n         * @param {object} actor\n         * @returns {string}\n         */\n        #getConsumeData (item) {\n        // Get consume target and type\n            const consumeId = item?.system?.consume?.target\n            const consumeType = item?.system?.consume?.type\n            const consumeAmount = item?.system?.consume?.amount\n\n            if (!consumeId || !consumeType || consumeId === item.id) return {}\n\n            // Return resources\n            if (consumeType === 'attribute') {\n                const parentId = consumeId.substr(0, consumeId.lastIndexOf('.'))\n                const target = foundry.utils.getProperty(this.actor.system, parentId)\n\n                if (target) {\n                    const text = `${target.value ?? '0'}${target.max ? `/${target.max}` : ''}`\n                    return {\n                        text,\n                        title: `${text} ${target.label ?? ''}`\n                    }\n                }\n            } else {\n                const target = this.actor.items?.get(consumeId)\n\n                // Return charges\n                if (target && consumeType === 'charges') {\n                    return this.#getUsesData(target, target.name, consumeAmount)\n                }\n\n                // Return quantity\n                if (target?.system?.quantity) {\n                    const text = `${consumeAmount > 1 ? `${consumeAmount} ${coreModule.api.Utils.i18n('DND5E.of')} ` : ''}${target.system.quantity}`\n                    return {\n                        text,\n                        title: `${text} ${target.name}`\n                    }\n                }\n            }\n\n            return {}\n        }\n\n        /**\n         * Discard slow items\n         * @private\n         * @param {object} items\n         * @returns {object}\n         */\n        #discardSlowItems (items) {\n            // Get setting\n            const showSlowActions = Utils.getSetting('showSlowActions')\n\n            // Return all items\n            if (showSlowActions) return items\n\n            // Return filtered items\n            const slowActivationTypes = ['minute', 'hour', 'day']\n\n            // Initialize map\n            const filteredItems = new Map()\n\n            // Loop items and set those with fast activation types into the new map\n            for (const [key, value] of items.entries()) {\n                const activationType = value.system?.activation?.type\n                if (!slowActivationTypes.includes(activationType)) filteredItems.set(key, value)\n            }\n\n            return filteredItems\n        }\n\n        /**\n         * Get proficiency icon\n         * @param {string} level\n         * @returns {string}\n         */\n        #getProficiencyIcon (level) {\n            const title = CONFIG.DND5E.proficiencyLevels[level] ?? ''\n            const icon = PROFICIENCY_LEVEL_ICON[level]\n            if (icon) return `<i class=\"${icon}\" title=\"${title}\"></i>`\n        }\n\n        /**\n         * Get icon for the activation type\n         * @private\n         * @param {object} activationType\n         * @returns {string}\n         */\n        #getActivationTypeIcon (activationType) {\n            const title = CONFIG.DND5E.abilityActivationTypes[activationType] ?? ''\n            const icon = ACTIVATION_TYPE_ICON[activationType]\n            if (icon) return `<i class=\"${icon}\" title=\"${title}\"></i>`\n        }\n\n        /**\n         * Get icon for concentration type\n         * @private\n         * @param {object} spell\n         * @returns {string}\n         */\n        #getConcentrationIcon (spell) {\n            if (spell?.type !== 'spell' || !this.displaySpellInfo || !spell.system?.properties?.has('concentration')) return null\n            const Dnd5eV3_2 = foundry.utils.isNewerVersion(game.system.version, \"3.1.99\")\n            const title = coreModule.api.Utils.i18n(`DND5E.Scroll${Dnd5eV3_2 ? '.' : ''}RequiresConcentration`)\n            const icon = CONCENTRATION_ICON\n            return `<dnd5e-icon src=\"${icon}\" title=\"${title}\">`\n        }\n\n        /**\n         * Get icon for a prepared spell\n         * @private\n         * @param {object} spell\n         * @returns\n         */\n        #getPreparedIcon (spell) {\n            if (spell?.type !== 'spell' || !this.showUnpreparedSpells) return null\n            const level = spell.system.level\n            const preparationMode = spell.system.preparation.mode\n            const prepared = spell.system.preparation.prepared\n            const icon = prepared ? PREPARED_ICON : `${PREPARED_ICON} tah-icon-disabled`\n            const title = preparationMode === 'always' ? coreModule.api.Utils.i18n('DND5E.SpellPrepAlways') : prepared ? coreModule.api.Utils.i18n('DND5E.SpellPrepared') : coreModule.api.Utils.i18n('DND5E.SpellUnprepared')\n\n            // Return icon if the preparation mode is 'prepared' or 'always' and the spell is not a cantrip\n            return ((preparationMode === 'prepared' || preparationMode === 'always') && level !== 0) ? `<i class=\"${icon}\" title=\"${title}\"></i>` : null\n        }\n\n        async #getTooltipData (entity) {\n            if (this.tooltipsSetting === 'none') return ''\n\n            const name = entity?.name ?? ''\n\n            if (this.tooltipsSetting === 'nameOnly') return name\n\n            const unidentified = entity.system?.identified === false\n            const description = (typeof entity?.system?.description === 'string') ? entity?.system?.description : (unidentified ? entity?.system?.unidentified?.description : entity?.system?.description?.value) ?? ''\n            let modifiers, properties, rarity, traits\n            if (!unidentified) {\n                modifiers = entity?.modifiers ?? null\n                properties = [\n                    ...entity.system?.chatProperties ?? [],\n                    ...entity.system?.equippableItemCardProperties ?? [],\n                    ...entity.system?.activatedEffectCardProperties ?? []\n                ].filter(p => p)\n                rarity = unidentified ? null : entity?.rarity ?? null\n                traits = (entity?.type === 'weapon') ? this.#getWeaponProperties(entity?.system?.properties) : null\n            }\n            return { name, description, modifiers, properties, rarity, traits }\n        }\n\n        /**\n         * Get condition tooltip data\n         * @param {*} id     The condition id\n         * @param {*} name   The condition name\n         * @returns {object} The tooltip data\n         */\n        async #getConditionTooltipData (id, name) {\n            if (this.tooltipsSetting === 'none') return ''\n            if (this.tooltipsSetting === 'nameOnly') return name\n\n            const journalEntry = (CONDITION[id]) ? (CONDITION[id]?.uuid) ? await fromUuid(CONDITION[id].uuid) : null : null\n            const description = journalEntry?.text?.content ?? ''\n            const relativeTo = journalEntry\n            return {\n                name,\n                description,\n                relativeTo\n            }\n        }\n\n        /**\n         * Get tooltip\n         * @param {object} tooltipData The tooltip data\n         * @returns {string}           The tooltip\n         */\n        async #getTooltip (tooltipData) {\n            if (this.tooltipsSetting === 'none') return ''\n            if (typeof tooltipData === 'string') return tooltipData\n\n            const name = coreModule.api.Utils.i18n(tooltipData.name)\n\n            if (this.tooltipsSetting === 'nameOnly') return name\n\n            const nameHtml = `<h3>${name}</h3>`\n\n            const relativeTo = tooltipData.relativeTo ?? this.actor\n\n            const description = tooltipData?.descriptionLocalised ??\n                await TextEditor.enrichHTML(coreModule.api.Utils.i18n(tooltipData?.description ?? ''), { async: true, relativeTo, secrets: true })\n\n            const rarityHtml = tooltipData?.rarity\n                ? `<span class=\"tah-tag ${tooltipData.rarity}\">${coreModule.api.Utils.i18n(RARITY[tooltipData.rarity])}</span>`\n                : ''\n\n            const propertiesHtml = tooltipData?.properties\n                ? `<div class=\"tah-properties\">${tooltipData.properties.map(property => `<span class=\"tah-property\">${coreModule.api.Utils.i18n(property)}</span>`).join('')}</div>`\n                : ''\n\n            const traitsHtml = tooltipData?.traits\n                ? tooltipData.traits.map(trait => `<span class=\"tah-tag\">${coreModule.api.Utils.i18n(trait.label ?? trait)}</span>`).join('')\n                : ''\n\n            const traits2Html = tooltipData?.traits2\n                ? tooltipData.traits2.map(trait => `<span class=\"tah-tag tah-tag-secondary\">${coreModule.api.Utils.i18n(trait.label ?? trait)}</span>`).join('')\n                : ''\n\n            const traitsAltHtml = tooltipData?.traitsAlt\n                ? tooltipData.traitsAlt.map(trait => `<span class=\"tah-tag tah-tag-alt\">${coreModule.api.Utils.i18n(trait.label)}</span>`).join('')\n                : ''\n\n            const modifiersHtml = tooltipData?.modifiers\n                ? `<div class=\"tah-tags\">${tooltipData.modifiers.filter(modifier => modifier.enabled).map(modifier => {\n                    const label = coreModule.api.Utils.i18n(modifier.label)\n                    const sign = modifier.modifier >= 0 ? '+' : ''\n                    const mod = `${sign}${modifier.modifier ?? ''}`\n                    return `<span class=\"tah-tag tah-tag-transparent\">${label} ${mod}</span>`\n                }).join('')}</div>`\n                : ''\n\n            const tagsJoined = [rarityHtml, traitsHtml, traits2Html, traitsAltHtml].join('')\n\n            const tagsHtml = (tagsJoined) ? `<div class=\"tah-tags\">${tagsJoined}</div>` : ''\n\n            const headerTags = (tagsHtml || modifiersHtml) ? `<div class=\"tah-tags-wrapper\">${tagsHtml}${modifiersHtml}</div>` : ''\n\n            if (!description && !tagsHtml && !modifiersHtml) return name\n\n            return `<div>${nameHtml}${headerTags}${description}${propertiesHtml}</div>`\n        }\n\n        #getWeaponProperties (weaponProperties) {\n            if (!weaponProperties) return null\n            return Object.entries(weaponProperties)\n                .filter(([id, selected]) => selected && WEAPON_PROPERTY[id])\n                .map(([id, _]) => coreModule.api.Utils.i18n(WEAPON_PROPERTY[id]))\n        }\n    }\n})\n","export let MagicItemActionHandlerExtender = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    MagicItemActionHandlerExtender = class MagicItemActionHandlerExtender extends coreModule.api.ActionHandlerExtender {\n        constructor (actionHandler) {\n            super()\n            this.actionHandler = actionHandler\n            this.actor = null\n        }\n\n        /**\n     * Extend the action list\n     */\n        async extendActionHandler () {\n            this.actor = this.actionHandler.actor\n            if (!this.actor) return\n\n            const actor = await MagicItems.actor(this.actor.id)\n\n            if (!actor) return\n\n            const magicItems = actor.items ?? []\n\n            if (magicItems.length === 0) return\n\n            const parentGroupId = 'magic-items'\n            const parentGroupType = 'system'\n            const parentGroupData = {\n                id: parentGroupId,\n                type: parentGroupType\n            }\n\n            magicItems.forEach((magicItem) => {\n                if (magicItem.attuned && !this._isItemAttuned(magicItem)) return\n                if (magicItem.equipped && !this._isItemEquipped(magicItem)) return\n\n                const groupId = `magic-items_${magicItem.id}`\n                const groupName = magicItem.name\n                const groupType = 'system-derived'\n                const groupInfo1 = `${magicItem.uses}/${magicItem.charges}`\n                const groupData = {\n                    id: groupId,\n                    name: groupName,\n                    type: groupType,\n                    info1: groupInfo1\n                }\n\n                // Add group to HUD\n                this.actionHandler.addGroup(groupData, parentGroupData)\n\n                const actions = magicItem.ownedEntries.map((entry) => {\n                    const effect = entry.item\n                    const id = effect.id\n                    const name = effect.name\n                    const encodedValue = [\n                        'magicItem',\n                        `${magicItem.id}>${id}`\n                    ].join('|')\n                    const img = coreModule.api.Utils.getImage(effect)\n                    const info1 = effect.consumption\n                    const info2 = (effect.baseLevel) ? `${coreModule.api.Utils.i18n('DND5E.AbbreviationLevel')} ${effect.baseLevel}` : ''\n                    return {\n                        id,\n                        name,\n                        encodedValue,\n                        img,\n                        info1,\n                        info2,\n                        selected: true\n                    }\n                })\n\n                // Add actions to action list\n                this.actionHandler.addActions(actions, groupData)\n            })\n        }\n\n        /**\n     * Whether the magic item is equipped or not\n     * @param {object} magicItem The item\n     * @returns {boolean}\n     */\n        _isItemEquipped (magicItem) {\n            return magicItem.item.system.equipped\n        }\n\n        /**\n     * Whether the magic items is attuned or not\n     * @param {object} magicItem The item\n     * @returns {boolean}\n     */\n        _isItemAttuned (magicItem) {\n            const attunement = magicItem.item.system.attunment\n            const attunementRequired = CONFIG.DND5E.attunementTypes?.REQUIRED ?? 1\n\n            if (attunement === attunementRequired) return false\n\n            return true\n        }\n    }\n})\n","export let RollHandler = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    RollHandler = class RollHandler extends coreModule.api.RollHandler {\n    /**\n     * Handle action click\n     * @override\n     * @param {object} event\n     * @param {string} encodedValue\n     */\n        async handleActionClick (event, encodedValue) {\n            const [actionType, actionId] = encodedValue.split('|')\n\n            if (!this.actor) {\n                for (const token of coreModule.api.Utils.getControlledTokens()) {\n                    const actor = token.actor\n                    await this.#handleAction(event, actionType, actor, token, actionId)\n                }\n            } else {\n                await this.#handleAction(event, actionType, this.actor, this.token, actionId)\n            }\n        }\n\n        /**\n         * Handle action\n         * @private\n         * @param {object} event\n         * @param {string} actionType\n         * @param {object} actor\n         * @param {object} token\n         * @param {string} actionId\n         */\n        async #handleAction (event, actionType, actor, token, actionId) {\n            switch (actionType) {\n            case 'ability':\n                this.#rollAbility(event, actor, actionId)\n                break\n            case 'check':\n                this.#rollAbilityTest(event, actor, actionId)\n                break\n            case 'save':\n                this.#rollAbilitySave(event, actor, actionId)\n                break\n            case 'condition':\n                if (!token) return\n                await this.#toggleCondition(event, actor, token, actionId)\n                break\n            case 'counter':\n                await this.#modifyCounter(event, actor, actionId)\n                break\n            case 'effect':\n                await this.#toggleEffect(event, actor, actionId)\n                break\n            case 'exhaustion':\n                await this.#modifyExhaustion(event, actor)\n                break\n            case 'feature':\n            case 'item':\n            case 'spell':\n            case 'weapon':\n                if (this.isRenderItem()) this.renderItem(actor, actionId)\n                else this.#useItem(event, actor, actionId)\n                break\n            case 'magicItem':\n                await this.#rollMagicItem(actor, actionId)\n                break\n            case 'skill':\n                this.#rollSkill(event, actor, actionId)\n                break\n            case 'utility':\n                await this.#performUtilityAction(event, actor, token, actionId)\n                break\n            default:\n                break\n            }\n        }\n\n        /**\n         * Modify Counter\n         * @private\n         * @param {object} event The event\n         * @param {object} actor The actor\n         * @param {string} actionId The action id\n         */\n        async #modifyCounter (event, actor, actionId) {\n            switch (actionId) {\n            case 'death-saves':\n                this.#rollDeathSave(event, actor)\n                break\n            case 'exhaustion':\n                await this.#modifyExhaustion(event, actor)\n                break\n            case 'inspiration':\n                await this.#modifyInspiration(actor)\n                break\n            default:\n                await this.#modifyCustomCounter(event, actor, actionId)\n                break\n            }\n        }\n\n        /**\n         * Modify Exhaustion\n         * @private\n         * @param {object} event The event\n         * @param {object} actor The actor\n         */\n        async #modifyExhaustion (event, actor) {\n            const isRightClick = this.isRightClick(event)\n            const exhaustion = actor.system.attributes.exhaustion\n            const update = (isRightClick) ? exhaustion - 1 : exhaustion + 1\n            if (update >= 0) {\n                actor.update({ 'system.attributes.exhaustion': update })\n            }\n        }\n\n        /**\n         * Modify Inspiration\n         * @private\n         * @param {object} actor The actor\n         */\n        async #modifyInspiration (actor) {\n            const update = !actor.system.attributes.inspiration\n            actor.update({ 'system.attributes.inspiration': update })\n        }\n\n        /**\n         * Modify Custom Counter\n         * @private\n         * @param {object} event The event\n         * @param {object} actor The actor\n         * * @param {string} actionId The action id\n         */\n        async #modifyCustomCounter (event, actor, actionId) {\n            if (!coreModule.api.Utils.isModuleActive('dnd5e-custom-counters')) return\n\n            const [id, type] = decodeURIComponent(actionId).split('>')\n\n            const isRightClick = this.isRightClick(event)\n            const isCtrl = this.isCtrl(event)\n            let value = actor.getFlag('dnd5e-custom-counters', id)\n\n            switch (type) {\n            case 'checkbox':\n                await actor.setFlag('dnd5e-custom-counters', id, !value)\n                break\n            case 'number':\n                value = value ?? 0\n                if (isRightClick) {\n                    if (value > 0) {\n                        await actor.setFlag('dnd5e-custom-counters', id, value - 1)\n                    }\n                } else {\n                    await actor.setFlag('dnd5e-custom-counters', id, value + 1)\n                }\n                break\n            case 'successFailure':\n                value = value ?? {}\n                value.success = value?.success ?? 0\n                value.failure = value?.failure ?? 0\n                if (isRightClick) {\n                    if (isCtrl) {\n                        if (value?.failure > 0) {\n                            await actor.setFlag('dnd5e-custom-counters', `${id}.failure`, value.failure - 1)\n                        }\n                    } else {\n                        if (value?.success > 0) {\n                            await actor.setFlag('dnd5e-custom-counters', `${id}.success`, value.success - 1)\n                        }\n                    }\n                } else {\n                    if (isCtrl) {\n                        await actor.setFlag('dnd5e-custom-counters', `${id}.failure`, value.failure + 1)\n                    } else {\n                        await actor.setFlag('dnd5e-custom-counters', `${id}.success`, value.success + 1)\n                    }\n                }\n            }\n        }\n\n        /**\n         * Roll Ability\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #rollAbility (event, actor, actionId) {\n            if (!actor) return\n            if (!actor.system?.abilities) return\n            actor.rollAbility(actionId, { event })\n        }\n\n        /**\n         * Roll Ability Save\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #rollAbilitySave (event, actor, actionId) {\n            if (!actor) return\n            if (!actor.system?.abilities) return\n            actor.rollAbilitySave(actionId, { event })\n        }\n\n        /**\n         * Roll Ability Test\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #rollAbilityTest (event, actor, actionId) {\n            if (!actor) return\n            if (!actor.system?.abilities) return\n            actor.rollAbilityTest(actionId, { event })\n        }\n\n        /**\n         * Roll Death Save\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         */\n        #rollDeathSave (event, actor) {\n            actor.rollDeathSave({ event })\n        }\n\n        /**\n         * Roll Magic Item\n         * @private\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #rollMagicItem (actor, actionId) {\n            const actionParts = actionId.split('>')\n\n            const itemId = actionParts[0]\n            const magicEffectId = actionParts[1]\n\n            const magicItemActor = await MagicItems.actor(actor.id)\n\n            // magicitems module 3.0.0 does not support Item5e#use\n            magicItemActor.roll(itemId, magicEffectId)\n\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n\n        /**\n         * Roll Skill\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        #rollSkill (event, actor, actionId) {\n            if (!actor) return\n            if (!actor.system?.skills) return\n            actor.rollSkill(actionId, { event })\n        }\n\n        /**\n         * Use Item\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         * @returns {object}        The item\n         */\n        #useItem (event, actor, actionId) {\n            const item = coreModule.api.Utils.getItem(actor, actionId)\n\n            if (this.#needsRecharge(item)) {\n                item.rollRecharge()\n                return\n            }\n\n            return item.use({ event })\n        }\n\n        /**\n         * Needs Recharge\n         * @private\n         * @param {object} item\n         * @returns {boolean}\n         */\n        #needsRecharge (item) {\n            return (\n                item.system.recharge &&\n                !item.system.recharge.charged &&\n                item.system.recharge.value\n            )\n        }\n\n        /**\n         * Perform utility action\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {object} token    The token\n         * @param {string} actionId The action id\n         */\n        async #performUtilityAction (event, actor, token, actionId) {\n            switch (actionId) {\n            case 'deathSave':\n                this.#rollDeathSave(event, actor)\n                break\n            case 'endTurn':\n                if (!token) break\n                if (game.combat?.current?.tokenId === token.id) {\n                    await game.combat?.nextTurn()\n                }\n                break\n            case 'initiative':\n                await this.#rollInitiative(actor)\n                break\n            case 'inspiration':\n                await this.#modifyInspiration(actor)\n                break\n            case 'longRest':\n                actor.longRest()\n                break\n            case 'shortRest':\n                actor.shortRest()\n                break\n            }\n\n            // Update HUD\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n\n        /**\n         * Roll Initiative\n         * @param {object} actor The actor\n         * @private\n         */\n        async #rollInitiative (actor) {\n            if (!actor) return\n            await actor.rollInitiative({ createCombatants: true })\n\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n\n        /**\n         * Toggle Condition\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {object} token    The token\n         * @param {string} actionId The action id\n         */\n        async #toggleCondition (event, actor, token, actionId) {\n            if (!token) return\n\n            const isRightClick = this.isRightClick(event)\n            const statusEffect = CONFIG.statusEffects.find(statusEffect => statusEffect.id === actionId)\n            const isConvenient = (statusEffect?.flags)\n                ? Object.hasOwn(statusEffect.flags, 'dfreds-convenient-effects')\n                    ? statusEffect.flags['dfreds-convenient-effects'].isConvenient\n                    : null\n                : null ??\n                actionId.startsWith('Convenient Effect')\n\n            if (game.dfreds && isConvenient) {\n                isRightClick\n                    ? await game.dfreds.effectInterface.toggleEffect(statusEffect.name ?? statusEffect.label, { overlay: true })\n                    : await game.dfreds.effectInterface.toggleEffect(statusEffect.name ?? statusEffect.label)\n            } else {\n                const condition = this.#findCondition(actionId)\n                if (!condition) return\n                const effect = this.#findEffect(actor, actionId)\n                if (effect?.disabled) { await effect.delete() }\n\n                isRightClick\n                    ? await token.toggleEffect(condition, { overlay: true })\n                    : await token.toggleEffect(condition)\n            }\n\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n\n        /**\n         * Find condition\n         * @private\n         * @param {string} actionId The action id\n         * @returns {object}        The condition\n         */\n        #findCondition (actionId) {\n            return CONFIG.statusEffects.find((effect) => effect.id === actionId)\n        }\n\n        /**\n         * Find effect\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         * @returns {object}        The effect\n         */\n        #findEffect (actor, actionId) {\n            if (game.version.startsWith('11')) {\n                return actor.effects.find(effect => effect.statuses.every(status => status === actionId))\n            } else {\n                // V10\n                return actor.effects.find(effect => effect.flags?.core?.statusId === actionId)\n            }\n        }\n\n        /**\n         * Toggle Effect\n         * @private\n         * @param {object} event    The event\n         * @param {object} actor    The actor\n         * @param {string} actionId The action id\n         */\n        async #toggleEffect (event, actor, actionId) {\n            const effects = 'find' in actor.effects.entries ? actor.effects.entries : actor.effects\n            let effect = effects.find(effect => effect.id === actionId)\n\n            // only allow deletion if effect is directly on this actor\n            let internalEffect = true\n\n            // if the effect isn't directly on the actor, search all applicable effects for it\n            if (!effect) {\n                internalEffect = false\n                for (const e of actor.allApplicableEffects()) {\n                    if (e.id === actionId) {\n                        effect = e\n                    }\n                }\n            }\n\n            if (!effect) return\n\n            const isRightClick = this.isRightClick(event)\n\n            if (isRightClick && internalEffect) {\n                await effect.delete()\n            } else {\n                await effect.update({ disabled: !effect.disabled })\n            }\n\n            Hooks.callAll('forceUpdateTokenActionHud')\n        }\n\n        /**\n         * Handle action hover\n         * @override\n         * @param {object} event\n         * @param {string} encodedValue\n         */\n        async handleActionHover (event, encodedValue) {\n            const types = ['feature', 'item', 'spell', 'weapon', 'magicItem']\n            const [actionType, actionId] = encodedValue.split('|')\n\n            if (!types.includes(actionType)) return\n\n            const item = coreModule.api.Utils.getItem(this.actor, actionId)\n\n            switch (event.type) {\n            case 'mouseenter':\n            case 'mouseover':\n                Hooks.call('tokenActionHudSystemActionHoverOn', event, item)\n                break\n            case 'mouseleave':\n            case 'mouseout':\n                Hooks.call('tokenActionHudSystemActionHoverOff', event, item)\n                break\n            }\n        }\n    }\n})\n","import { RollHandler } from './roll-handler.js'\n\nexport class RollHandlerObsidian extends RollHandler {\n    /**\n     * Roll Ability Test\n     * @override\n     * @param {object} event\n     * @param {string} actionId\n     */\n    _rollAbilityTest (event, actionId) {\n        OBSIDIAN.Items.roll(super.actor, { roll: 'abl', abl: actionId })\n    }\n\n    /**\n     * Roll Ability Save\n     * @override\n     * @param {object} event\n     * @param {string} actorId\n     * @param {string} tokenId\n     * @param {string} actionId\n     */\n    _rollAbilitySave (event, actionId) {\n        OBSIDIAN.Items.roll(super.actor, { roll: 'save', save: actionId })\n    }\n\n    /**\n     * Roll Skill\n     * @override\n     * @param {object} event\n     * @param {string} actionId\n     */\n    _rollSkill (event, actionId) {\n        OBSIDIAN.Items.roll(super.actor, { roll: 'skl', skl: actionId })\n    }\n\n    /**\n     * Use Item\n     * @override\n     * @param {object} event\n     * @param {string} actionId\n     */\n    _useItem (event, actionId) {\n        OBSIDIAN.Items.roll(super.actor, { roll: 'item', id: actionId })\n    }\n}\n","import { GROUP } from './constants.js'\n\n/**\n * Default categories and groups\n */\nexport let DEFAULTS = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    const groups = GROUP\n    Object.values(groups).forEach(group => {\n        group.name = coreModule.api.Utils.i18n(group.name)\n        group.listName = `Group: ${coreModule.api.Utils.i18n(group.name)}`\n    })\n    const groupsArray = Object.values(groups)\n    DEFAULTS = {\n        layout: [\n            {\n                nestId: 'inventory',\n                id: 'inventory',\n                name: coreModule.api.Utils.i18n('DND5E.Inventory'),\n                groups: [\n                    { ...groups.weapons, nestId: 'inventory_weapons' },\n                    { ...groups.equipment, nestId: 'inventory_equipment' },\n                    { ...groups.consumables, nestId: 'inventory_consumables' },\n                    { ...groups.tools, nestId: 'inventory_tools' },\n                    { ...groups.containers, nestId: 'inventory_containers' },\n                    { ...groups.loot, nestId: 'inventory_loot' }\n                ]\n            },\n            {\n                nestId: 'features',\n                id: 'features',\n                name: coreModule.api.Utils.i18n('DND5E.Features'),\n                groups: [\n                    { ...groups.activeFeatures, nestId: 'features_active-features' },\n                    { ...groups.passiveFeatures, nestId: 'features_passive-features' }\n                ]\n            },\n            {\n                nestId: 'spells',\n                id: 'spells',\n                name: coreModule.api.Utils.i18n('ITEM.TypeSpellPl'),\n                groups: [\n                    { ...groups.atWillSpells, nestId: 'spells_at-will-spells' },\n                    { ...groups.innateSpells, nestId: 'spells_innate-spells' },\n                    { ...groups.pactSpells, nestId: 'spells_pact-spells' },\n                    { ...groups.cantrips, nestId: 'spells_cantrips' },\n                    { ...groups._1stLevelSpells, nestId: 'spells_1st-level-spells' },\n                    { ...groups._2ndLevelSpells, nestId: 'spells_2nd-level-spells' },\n                    { ...groups._3rdLevelSpells, nestId: 'spells_3rd-level-spells' },\n                    { ...groups._4thLevelSpells, nestId: 'spells_4th-level-spells' },\n                    { ...groups._5thLevelSpells, nestId: 'spells_5th-level-spells' },\n                    { ...groups._6thLevelSpells, nestId: 'spells_6th-level-spells' },\n                    { ...groups._7thLevelSpells, nestId: 'spells_7th-level-spells' },\n                    { ...groups._8thLevelSpells, nestId: 'spells_8th-level-spells' },\n                    { ...groups._9thLevelSpells, nestId: 'spells_9th-level-spells' }\n                ]\n            },\n            {\n                nestId: 'attributes',\n                id: 'attributes',\n                name: coreModule.api.Utils.i18n('DND5E.Attributes'),\n                groups: [\n                    { ...groups.abilities, nestId: 'attributes_abilities' },\n                    { ...groups.skills, nestId: 'attributes_skills' }\n                ]\n            },\n            {\n                nestId: 'effects',\n                id: 'effects',\n                name: coreModule.api.Utils.i18n('DND5E.Effects'),\n                groups: [\n                    { ...groups.temporaryEffects, nestId: 'effects_temporary-effects' },\n                    { ...groups.passiveEffects, nestId: 'effects_passive-effects' },\n                    { ...groups.conditions, nestId: 'effects_conditions' }\n                ]\n            },\n            {\n                nestId: 'utility',\n                id: 'utility',\n                name: coreModule.api.Utils.i18n('tokenActionHud.utility'),\n                groups: [\n                    { ...groups.combat, nestId: 'utility_combat' },\n                    { ...groups.token, nestId: 'utility_token' },\n                    { ...groups.rests, nestId: 'utility_rests' },\n                    { ...groups.utility, nestId: 'utility_utility' }\n                ]\n            }\n        ],\n        groups: groupsArray\n    }\n})\n","import { MODULE } from './constants.js'\n\nexport function register (updateFunc) {\n    game.settings.register(MODULE.ID, 'abbreviateSkills', {\n        name: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.abbreviateSkills.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.abbreviateSkills.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'showSlowActions', {\n        name: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.showSlowActions.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.showSlowActions.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'displaySpellInfo', {\n        name: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.displaySpellInfo.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.displaySpellInfo.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'showUnchargedItems', {\n        name: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.showUnchargedItems.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.showUnchargedItems.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'showUnequippedItems', {\n        name: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.showUnequippedItems.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.showUnequippedItems.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'showUnequippedItemsNpcs', {\n        name: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.showUnequippedItemsNpcs.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.showUnequippedItemsNpcs.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: true,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'showUnpreparedSpells', {\n        name: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.showUnpreparedSpells.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.showUnpreparedSpells.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n\n    game.settings.register(MODULE.ID, 'showItemsWithoutActivationCosts', {\n        name: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.showItemsWithoutActivationCosts.name'\n        ),\n        hint: game.i18n.localize(\n            'tokenActionHud.dnd5e.settings.showItemsWithoutActivationCosts.hint'\n        ),\n        scope: 'client',\n        config: true,\n        type: Boolean,\n        default: false,\n        onChange: (value) => {\n            updateFunc(value)\n        }\n    })\n}\n","// System Module Imports\nimport { ActionHandler } from './action-handler.js'\nimport { MagicItemActionHandlerExtender } from './magic-items-extender.js'\nimport { RollHandler as Core } from './roll-handler.js'\nimport { RollHandlerObsidian as Obsidian5e } from './roll-handler-obsidian.js'\nimport { DEFAULTS } from './defaults.js'\nimport * as systemSettings from './settings.js'\n\nexport let SystemManager = null\n\nHooks.once('tokenActionHudCoreApiReady', async (coreModule) => {\n    SystemManager = class SystemManager extends coreModule.api.SystemManager {\n        /** @override */\n        getActionHandler () {\n            const actionHandler = new ActionHandler()\n            if (coreModule.api.Utils.isModuleActive('magic-items-2') || coreModule.api.Utils.isModuleActive('magicitems')) { actionHandler.addActionHandlerExtender(new MagicItemActionHandlerExtender(actionHandler)) }\n            return actionHandler\n        }\n\n        /** @override */\n        getAvailableRollHandlers () {\n            let coreTitle = 'Core D&D5e'\n\n            if (coreModule.api.Utils.isModuleActive('midi-qol')) { coreTitle += ` [supports ${coreModule.api.Utils.getModuleTitle('midi-qol')}]` }\n\n            const choices = { core: coreTitle }\n            coreModule.api.SystemManager.addHandler(choices, 'obsidian')\n\n            return choices\n        }\n\n        /** @override */\n        getRollHandler (rollHandlerId) {\n            let rollHandler\n            switch (rollHandlerId) {\n            case 'obsidian':\n                rollHandler = new Obsidian5e()\n                break\n            case 'core':\n            default:\n                rollHandler = new Core()\n                break\n            }\n\n            return rollHandler\n        }\n\n        /** @override */\n        registerSettings (onChangeFunction) {\n            systemSettings.register(onChangeFunction)\n        }\n\n        /** @override */\n        async registerDefaults () {\n            const defaults = DEFAULTS\n            // If the 'Magic Items' module is active, then add a group for it\n            if (game.modules.get('magicitems')?.active || game.modules.get('magic-items-2')?.active) {\n                const name = coreModule.api.Utils.i18n('tokenActionHud.dnd5e.magicItems')\n                defaults.groups.push(\n                    {\n                        id: 'magic-items',\n                        name,\n                        listName: `Group: ${name}`,\n                        type: 'system'\n                    }\n                )\n                defaults.groups.sort((a, b) => a.id.localeCompare(b.id))\n            }\n            return defaults\n        }\n    }\n})\n","import { SystemManager } from './system-manager.js'\nimport { MODULE, REQUIRED_CORE_MODULE_VERSION } from './constants.js'\n\nHooks.on('tokenActionHudCoreApiReady', async () => {\n    const module = game.modules.get(MODULE.ID)\n    module.api = {\n        requiredCoreModuleVersion: REQUIRED_CORE_MODULE_VERSION,\n        SystemManager\n    }\n    Hooks.call('tokenActionHudSystemReady', module)\n})\n"],"names":["MODULE","ID","CORE_MODULE","REQUIRED_CORE_MODULE_VERSION","ACTION_TYPE","ability","check","condition","counter","effect","exhaustion","feature","item","save","skill","spell","utility","ACTIVATION_TYPE_ICON","bonus","crew","day","hour","lair","minute","legendary","reaction","special","CONCENTRATION_ICON","CONDITION","blind","uuid","blinded","charmed","deaf","deafened","fear","frightened","grappled","incapacitated","invisible","paralysis","paralyzed","petrified","poison","poisoned","prone","restrain","restrained","stun","stunned","unconscious","GROUP","_1stLevelSpells","id","name","type","_2ndLevelSpells","_3rdLevelSpells","_4thLevelSpells","_5thLevelSpells","_6thLevelSpells","_7thLevelSpells","_8thLevelSpells","_9thLevelSpells","abilities","actions","activeFeatures","artificerInfusions","atWillSpells","backgroundFeatures","bonusActions","cantrips","channelDivinity","checks","classFeatures","combat","conditions","consumables","containers","counters","crewActions","defensiveTactics","eldritchInvocations","elementalDisciplines","equipment","equipped","feats","fightingStyles","huntersPrey","innateSpells","kiAbilities","lairActions","legendaryActions","loot","maneuvers","metamagicOptions","monsterFeatures","multiattacks","otherActions","pactBoons","pactSpells","passiveEffects","passiveFeatures","psionicPowers","raceFeatures","reactions","rests","runes","saves","skills","superiorHuntersDefense","temporaryEffects","token","tools","unequipped","weapons","PREPARED_ICON","PROFICIENCY_LEVEL_ICON","RARITY","common","uncommon","rare","veryRare","artifact","RITUAL_ICON","WEAPON_PROPERTY","ada","amm","fin","fir","foc","hvy","lgt","lod","mgc","rch","rel","ret","sil","spc","thr","two","ver","Utils","Hooks","once","async","coreModule","static","key","defaultValue","value","game","settings","get","api","Logger","debug","set","ActionHandler","actors","tokens","actorType","items","abbreviateSkills","displaySpellInfo","showItemsWithoutActivationCosts","showUnchargedItems","showUnequippedItems","showUnpreparedSpells","activationgroupIds","featuregroupIds","inventorygroupIds","spellgroupIds","featureActions","inventoryActions","spellActions","systemVersion","dnd5e","version","groupIds","this","actor","getActors","getTokens","discardSlowItems","sortItemsByName","getSetting","buildCharacterActions","buildVehicleActions","buildMultipleTokenActions","Promise","all","buildConditions","buildEffects","buildFeatures","buildInventory","buildSpells","buildAbilities","buildCombat","buildCounters","buildExhaustion","buildRests","buildSkills","buildUtility","actionType","groupId","system","CONFIG","DND5E","length","Object","entries","filter","map","abilityId","abbreviatedName","charAt","toUpperCase","slice","label","listName","i18n","encodedValue","join","delimiter","icon1","getProficiencyIcon","proficient","mod","info1","text","getModifier","info2","groupData","addActions","data","actionData","activationItems","Map","activationTypeMappings","action","reactiondamage","reactionmanual","other","activationType","activation","keys","includes","has","activationGroupId","groupDataClone","defaultSelected","parentgroupData","addGroup","addGroupInfo","buildActions","combatTypes","initiative","endTurn","current","tokenId","combatType","cssClass","tokenIds","getControlledTokens","combatants","combatant","currentInitiative","class","every","statusEffects","startsWith","effects","some","statuses","status","disabled","flags","core","statusId","img","getImage","tooltipData","getConditionTooltipData","tooltip","getTooltip","isModuleActive","_","visible","encodeURIComponent","active","attributes","death","success","failure","getFlag","allApplicableEffects","size","effectId","isSuppressed","parent","identified","user","isGM","isTemporary","featuresMap","featureTypes","classFeatureTypes","subType","subtype","featureType","groupNameMappings","buildActivations","inventoryMap","hasQuantity","quantity","isActiveItem","isUsableItem","isEquippedItem","restTypes","shortRest","longRest","restType","total","error","spellsMap","IwsApi","modules","isIwsSpell","isUsableSpell","preparation","mode","level","systemSpells","spells","reverse","pactSlot","spellSlots","spellSlotAvailable","pactSlotAvailable","hasValue","hasMax","max","hasLevel","slotAvailable","push","slotsAvailable","pactSpellEquivalent","findIndex","groupMappings","spellMode","spellSlotModes","groupName","levelInfo","find","spellSlot","slots","groupInfo","info","utilityTypes","deathSave","inspiration","hp","utilityType","options","getAction","entity","_id","recharge","charged","hasOwn","getActivationTypeIcon","icon2","getPreparedIcon","icon3","getConcentrationIcon","getItemInfo","info3","getTooltipData","activationTypes","abilityActivationTypes","at","uses","prepared","preparationModes","spellPreparationModes","preparationMode","getSpellInfo","getQuantityData","getUsesData","getConsumeData","componentsArray","components","properties","forEach","component","title","allowedTypes","consumeName","consumeAmount","per","prompt","of","period","limitedUsePeriods","amount","undefined","consumeId","consume","target","consumeType","parentId","substr","lastIndexOf","foundry","utils","getProperty","slowActivationTypes","filteredItems","proficiencyLevels","icon","Dnd5eV3_2","isNewerVersion","tooltipsSetting","unidentified","description","modifiers","rarity","traits","chatProperties","equippableItemCardProperties","activatedEffectCardProperties","p","getWeaponProperties","journalEntry","fromUuid","content","relativeTo","nameHtml","descriptionLocalised","TextEditor","enrichHTML","secrets","rarityHtml","propertiesHtml","property","traitsHtml","trait","traits2Html","traits2","traitsAltHtml","traitsAlt","modifiersHtml","modifier","enabled","tagsJoined","tagsHtml","weaponProperties","selected","MagicItemActionHandlerExtender","ActionHandlerExtender","constructor","actionHandler","super","MagicItems","magicItems","parentGroupData","magicItem","attuned","_isItemAttuned","_isItemEquipped","charges","ownedEntries","entry","consumption","baseLevel","attunment","attunementTypes","REQUIRED","RollHandler","event","actionId","split","handleAction","rollAbility","rollAbilityTest","rollAbilitySave","toggleCondition","modifyCounter","toggleEffect","modifyExhaustion","isRenderItem","renderItem","useItem","rollMagicItem","rollSkill","performUtilityAction","rollDeathSave","modifyInspiration","modifyCustomCounter","isRightClick","update","decodeURIComponent","isCtrl","setFlag","actionParts","itemId","magicEffectId","roll","callAll","getItem","needsRecharge","use","rollRecharge","nextTurn","rollInitiative","createCombatants","statusEffect","isConvenient","dfreds","effectInterface","overlay","findCondition","findEffect","delete","internalEffect","e","call","RollHandlerObsidian","_rollAbilityTest","OBSIDIAN","Items","abl","_rollAbilitySave","_rollSkill","skl","_useItem","DEFAULTS","register","updateFunc","localize","hint","scope","config","Boolean","default","onChange","groups","values","group","groupsArray","layout","nestId","SystemManager","getActionHandler","addActionHandlerExtender","getAvailableRollHandlers","coreTitle","getModuleTitle","choices","addHandler","getRollHandler","rollHandlerId","rollHandler","Obsidian5e","Core","registerSettings","onChangeFunction","systemSettings.register","defaults","sort","a","b","localeCompare","on","module","requiredCoreModuleVersion"],"mappings":"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"}